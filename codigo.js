    // ===============================================
    // CONFIGURACAO GLOBAL DA PLANILHA
    // ===============================================
    var PLANILHA_ID = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';

    /**
     * FUNCAO DE TESTE PARA VERIFICAR COLUNAS DA PLANILHA PEDIDOS
     */
    function verificarColunasPlanilaaPedidos() {
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
        if (!sheet) {
          return {
            status: 'error',
            message: 'Planilha "Pedidos" n√£o encontrada'
          };
        }

        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        
        const colunasRelacionadas = {
          'Fornecedor': headers.indexOf('Fornecedor'),
          'CNPJ Fornecedor': headers.indexOf('CNPJ Fornecedor'),
          'Endere√ßo Fornecedor': headers.indexOf('Endere√ßo Fornecedor'),
          'Estado Fornecedor': headers.indexOf('Estado Fornecedor'),
          'Condi√ß√£o Pagamento Fornecedor': headers.indexOf('Condi√ß√£o Pagamento Fornecedor'),
          'Forma Pagamento Fornecedor': headers.indexOf('Forma Pagamento Fornecedor')
        };

        return {
          status: 'success',
          headers: headers,
          colunasRelacionadas: colunasRelacionadas,
          estadoFornecedorExiste: colunasRelacionadas['Estado Fornecedor'] !== -1,
          totalColunas: headers.length
        };
        
      } catch (error) {
        return {
          status: 'error',
          message: 'Erro ao verificar colunas: ' + error.message
        };
      }
    }

    /**
     * FUNCAO DE TESTE PARA COMUNICACAO BACKEND
     */
    function testarComunicacao() {
      return {
        status: 'success',
        message: 'Comunicacao funcionando',
        timestamp: new Date().toISOString()
      };
    }

    /**
     * FUNCAO ALTERNATIVA PARA TESTE DE COMUNICACAO
     */
    function testeComunicacao() {
      return 'FUNCIONANDO';
    }

    /**
     * FUNCOES DE TESTE SEM PARAMETROS PARA EXECUCAO DIRETA NO APPS SCRIPT
     */
    function testeBuscarRascunhos001() {
      return buscarRascunhosCorrigida('001');
    }

    function testeBuscarRascunhosSimples001() {
      return buscarRascunhosSimples('001');
    }

    /**
     * FUN√á√ÉO DE TESTE PARA DIAGN√ìSTICO - EXECUTE ESTA!
     */
    function testeCompleto() {
      return diagnosticoCompleto();
    }

    /**
     * FUN√á√ÉO DE TESTE ESPEC√çFICA PARA ESTADO DO FORNECEDOR
     * Substitua "NOME_DO_FORNECEDOR" pelo nome real de um fornecedor da sua planilha
     */
    function testeEstado() {
      // ALTERE AQUI: coloque o nome exato de um fornecedor da sua planilha
      return testarEstadoFornecedor("ACLENILTON IVES DA SILVA");
    }

    /**
     * FUN√á√ÉO DE TESTE PARA VERIFICAR A CORRE√á√ÉO DO √çNDICE
     */
    function testeCorrecaoIndice() {
      return diagnosticoCompleto();
    }

    /**
     * DIAGNOSTICO COMPLETO DO SISTEMA
     * EXECUTE ESTA FUNCAO NO GOOGLE APPS SCRIPT, NAO NO NAVEGADOR!
     */
    function diagnosticoSistema() {
      try {
        var resultado = {
          timestamp: new Date().toISOString(),
          googleAppsScript: 'OK',
          planilhaAcess: 'TENTANDO...',
          planilhaId: PLANILHA_ID
        };
        
        // Testar acesso a planilha
        try {
          var planilha = SpreadsheetApp.openById(PLANILHA_ID);
          resultado.planilhaAcess = 'OK';
          resultado.planilhaNome = planilha.getName();
          
          // Testar acesso a aba Pedidos
          var aba = planilha.getSheetByName('Pedidos');
          if (aba) {
            resultado.abaPedidos = 'OK';
            resultado.totalLinhas = aba.getLastRow();
          } else {
            resultado.abaPedidos = 'NAO ENCONTRADA';
          }
          
        } catch (e) {
          resultado.planilhaAcess = 'ERRO: ' + e.message;
        }
        
        return resultado;
      } catch (error) {
        return {
          erro: error.message,
          timestamp: new Date().toISOString()
        };
      }
    }

    /**
     * TESTE ESPEC√çFICO PARA BUSCAR RASCUNHOS COM DEBUG
     */
    function testarBuscarRascunhos(empresaId) {
      try {
        console.log('üîß [DEBUG] Testando buscarRascunhos com empresaId:', empresaId);
        
        // Usar ID da planilha diretamente
        var planilhaId = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';
        console.log('üîß [DEBUG] Usando planilhaId:', planilhaId);
        
        // Testar acesso √† planilha
        var planilha = SpreadsheetApp.openById(planilhaId);
        console.log('üîß [DEBUG] Planilha acessada:', planilha.getName());
        
        // Testar acesso √† aba
        var aba = planilha.getSheetByName('Pedidos');
        if (!aba) {
          return {
            status: 'error',
            message: 'Aba Pedidos n√£o encontrada',
            debug: 'Aba inexistente'
          };
        }
        
        console.log('üîß [DEBUG] Aba encontrada');
        
        // Chamar a fun√ß√£o real
        var resultado = buscarRascunhos(empresaId);
        console.log('üîß [DEBUG] Resultado da buscarRascunhos:', resultado);
        
        return {
          status: 'success',
          message: 'Teste conclu√≠do',
          resultadoBusca: resultado,
          debug: 'Fun√ß√£o executada com sucesso'
        };
        
      } catch (error) {
        console.error('üîß [DEBUG] Erro no teste:', error);
        return {
          status: 'error',
          message: error.message,
          debug: error.stack
        };
      }
    }

    /**
     * BUSCAR RASCUNHOS VERSAO SIMPLIFICADA PARA TESTE
     */
    function buscarRascunhosSimples(empresaId) {
      try {
        console.log('üîç [SIMPLES] Iniciando busca para empresa:', empresaId);
        
        // ID da planilha diretamente
        var planilhaId = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';
        var planilha = SpreadsheetApp.openById(planilhaId);
        var aba = planilha.getSheetByName('Pedidos');
        
        if (!aba) {
          return {
            status: 'success',
            rascunhos: [],
            message: 'Aba Pedidos n√£o encontrada'
          };
        }
        
        var dados = aba.getDataRange().getValues();
        console.log('üîç [SIMPLES] Total de linhas:', dados.length);
        
        if (dados.length < 2) {
          return {
            status: 'success',
            rascunhos: [],
            message: 'Planilha vazia'
          };
        }
        
        var rascunhos = [];
        var cabecalhos = dados[0];
        
        // Encontrar colunas importantes
        var colunaStatus = cabecalhos.indexOf('Status');
        var colunaEmpresa = cabecalhos.indexOf('Empresa');
        var colunaNumero = cabecalhos.indexOf('N√∫mero do Pedido');
        var colunaFornecedor = cabecalhos.indexOf('Fornecedor');
        
        console.log('üîç [SIMPLES] Colunas - Status:', colunaStatus, 'Empresa:', colunaEmpresa);
        
        // Processar dados
        for (var i = 1; i < dados.length; i++) {
          var linha = dados[i];
          
          if (linha[colunaStatus] === 'RASCUNHO' && linha[colunaEmpresa]) {
            var empresaNaLinha = String(linha[colunaEmpresa]).replace(/'/g, '').trim();
            
            if (empresaNaLinha === String(empresaId).trim()) {
              rascunhos.push({
                id: linha[colunaNumero] ? String(linha[colunaNumero]).replace(/'/g, '') : '',
                fornecedor: linha[colunaFornecedor] || '',
                empresa: empresaNaLinha
              });
            }
          }
        }
        
        console.log('üîç [SIMPLES] Rascunhos encontrados:', rascunhos.length);
        
        return {
          status: 'success',
          rascunhos: rascunhos,
          message: rascunhos.length + ' rascunho(s) encontrado(s)'
        };
        
      } catch (error) {
        console.error('üîç [SIMPLES] Erro:', error);
        return {
          status: 'error',
          message: error.message,
          rascunhos: []
        };
      }
    }

    /**
     * VERSAO CORRIGIDA DA FUNCAO BUSCAR RASCUNHOS
     * Esta vers√£o garante compatibilidade total com Google Apps Script
     */
    function buscarRascunhosCorrigida(empresaId) {
      console.log('üîç [CORRIGIDA] === IN√çCIO buscarRascunhosCorrigida ===');
      console.log('üîç [CORRIGIDA] Par√¢metro empresaId RECEBIDO:', empresaId);
      console.log('üîç [CORRIGIDA] Tipo do empresaId:', typeof empresaId);
      console.log('üîç [CORRIGIDA] empresaId √© null?', empresaId === null);
      console.log('üîç [CORRIGIDA] empresaId √© undefined?', empresaId === undefined);
      console.log('üîç [CORRIGIDA] empresaId convertido para string:', String(empresaId));
      
      try {
        // ID da planilha definido localmente para evitar problemas de escopo
        var planilhaId = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';
        
        // Valida√ß√£o b√°sica
        if (!empresaId) {
          console.error('‚ùå [CORRIGIDA] empresaId √© obrigat√≥rio');
          console.error('‚ùå [CORRIGIDA] Valor recebido:', empresaId);
          return {
            status: 'error',
            message: 'ID da empresa √© obrigat√≥rio. Valor recebido: ' + empresaId,
            rascunhos: []
          };
        }
        
        console.log('‚úÖ [CORRIGIDA] Valida√ß√£o OK, acessando planilha...');
        var planilha = SpreadsheetApp.openById(planilhaId);
        var aba = planilha.getSheetByName('Pedidos');
        
        if (!aba) {
          console.log('üìã [CORRIGIDA] Aba Pedidos n√£o encontrada');
          return {
            status: 'success',
            rascunhos: [],
            message: 'Aba Pedidos n√£o encontrada'
          };
        }
        
        var dados = aba.getDataRange().getValues();
        console.log('üìä [CORRIGIDA] Total de linhas:', dados.length);
        
        if (dados.length < 2) {
          return {
            status: 'success',
            rascunhos: [],
            message: 'Planilha vazia'
          };
        }
        
        var cabecalhos = dados[0];
        var rascunhos = [];
        var empresaIdStr = String(empresaId).trim();
        
        console.log('üîç [CORRIGIDA] empresaIdStr ap√≥s convers√£o:', empresaIdStr);
        
        // Buscar poss√≠veis varia√ß√µes do nome da coluna de data √∫ltima edi√ß√£o
        var possiveisNomes = ['Data Ultima Edicao', 'Data √öltima Edi√ß√£o', 'Ultima Edicao', '√öltima Edi√ß√£o', 'Data da Ultima Edicao'];
        var indiceDataUltimaEdicao = -1;
        
        for (var nomeColuna of possiveisNomes) {
          var indice = cabecalhos.indexOf(nomeColuna);
          if (indice !== -1) {
            indiceDataUltimaEdicao = indice;
            console.log('üìä [CORRIGIDA] ‚úÖ Coluna encontrada:', nomeColuna, 'no √≠ndice:', indice);
            break;
          }
        }
        
        if (indiceDataUltimaEdicao === -1) {
          console.log('üìä [CORRIGIDA] ‚ö†Ô∏è Nenhuma coluna de data √∫ltima edi√ß√£o encontrada. Cabe√ßalhos dispon√≠veis:', cabecalhos);
        }
        
        // √çndices das colunas
        var indices = {
          numeroPedido: cabecalhos.indexOf('N√∫mero do Pedido'),
          empresa: cabecalhos.indexOf('Empresa'),
          status: cabecalhos.indexOf('Status'),
          data: cabecalhos.indexOf('Data'),
          fornecedor: cabecalhos.indexOf('Fornecedor'),
          estadoFornecedor: cabecalhos.indexOf('Estado Fornecedor'),
          nomeVeiculo: cabecalhos.indexOf('Nome Veiculo'),
          placaVeiculo: cabecalhos.indexOf('Placa Veiculo'),
          observacoes: cabecalhos.indexOf('Observacoes'),
          itens: cabecalhos.indexOf('Itens'),
          totalGeral: cabecalhos.indexOf('Total Geral'),
          dataUltimaEdicao: indiceDataUltimaEdicao
        };
        
        console.log('üìä [CORRIGIDA] √çndices das colunas:', indices);
        console.log('üìä [CORRIGIDA] ‚ö†Ô∏è Coluna Data Ultima Edicao encontrada?', indices.dataUltimaEdicao !== -1 ? 'SIM' : 'N√ÉO');
        console.log('üìä [CORRIGIDA] Processando ' + (dados.length - 1) + ' linhas...');
        
        // Processar todas as linhas
        for (var i = 1; i < dados.length; i++) {
          var linha = dados[i];
          var statusLinha = linha[indices.status];
          var empresaLinha = linha[indices.empresa];
          
          // Log detalhado das primeiras 5 linhas
          if (i <= 5) {
            console.log('üìä [CORRIGIDA] Linha ' + i + ': Status="' + statusLinha + '", Empresa="' + empresaLinha + '"');
          }
          
          if (statusLinha === 'RASCUNHO' && empresaLinha) {
            var empresaNaPlanilha = String(empresaLinha).replace(/'/g, '').trim();
            
            console.log('üîç [CORRIGIDA] Linha ' + i + ' √© RASCUNHO - Comparando "' + empresaNaPlanilha + '" com "' + empresaIdStr + '"');
            
            if (empresaNaPlanilha === empresaIdStr) {
              console.log('‚úÖ [CORRIGIDA] MATCH! Rascunho encontrado na linha ' + (i + 1));
              
              var itensArray = [];
              try {
                if (linha[indices.itens]) {
                  itensArray = JSON.parse(linha[indices.itens]);
                }
              } catch (e) {
                console.warn('‚ö†Ô∏è [CORRIGIDA] Erro ao parsear itens na linha ' + (i + 1));
                itensArray = [];
              }
                  rascunhos.push({
              id: linha[indices.numeroPedido] ? String(linha[indices.numeroPedido]).replace(/'/g, '') : '',
              data: linha[indices.data] ? String(linha[indices.data]) : '',
              fornecedor: linha[indices.fornecedor] || '',
              estadoFornecedor: linha[indices.estadoFornecedor] || '',
              nomeVeiculo: linha[indices.nomeVeiculo] || '',
              placaVeiculo: linha[indices.placaVeiculo] || '',
              observacoes: linha[indices.observacoes] || '',
              itens: itensArray,
              totalGeral: Number(linha[indices.totalGeral]) || 0,
              dataUltimaEdicao: (indices.dataUltimaEdicao !== -1 && linha[indices.dataUltimaEdicao]) ? String(linha[indices.dataUltimaEdicao]) : ''
            });
            }
          }
        }
        
        console.log('‚úÖ [CORRIGIDA] Processamento conclu√≠do - ' + rascunhos.length + ' rascunhos encontrados');
        
        var resultado = {
          status: 'success',
          rascunhos: rascunhos,
          message: rascunhos.length + ' rascunho(s) encontrado(s)'
        };
            console.log('üì§ [CORRIGIDA] Retornando resultado:', resultado);
      console.log('üì§ [CORRIGIDA] Tentando serializar resultado...');
      try {
        var resultadoSerializado = JSON.stringify(resultado);
        console.log('‚úÖ [CORRIGIDA] Serializa√ß√£o bem-sucedida');
      } catch (serializationError) {
        console.error('‚ùå [CORRIGIDA] Erro na serializa√ß√£o:', serializationError);
      }
      return resultado;
        
      } catch (error) {
        console.error('‚ùå [CORRIGIDA] Erro:', error);
        console.error('‚ùå [CORRIGIDA] Stack:', error.stack);
        return {
          status: 'error',
          message: 'Erro interno: ' + error.message,
          rascunhos: []
        };
      } finally {
        console.log('üîç [CORRIGIDA] === FIM buscarRascunhosCorrigida ===');
      }
    }

    /**
     * Converte uma string de cabe√ßalho (ex: "N√∫mero do Pedido", "CNPJ Fornecedor")
     * para o formato camelCase compat√≠vel com JavaScript (ex: "numeroDoPedido", "cnpjFornecedor").
     * Remove acentos e caracteres n√£o alfanum√©ricos.
     * @param {string} str O cabe√ßalho da coluna da planilha.
     * @returns {string} O cabe√ßalho formatado em camelCase.
     */
    function toCamelCase(str) {
      if (!str) return '';

      // 1. Converte para min√∫sculas e remove acentos
      let s = String(str)
        .toLowerCase()
        .normalize('NFD')
        .replace(/[\u0300-\u036f]/g, '');

      // 2. Substitui qualquer coisa que n√£o seja letra ou n√∫mero por um espa√ßo
      s = s.replace(/[^a-z0-9]+/g, ' ');

      // 3. Converte para camelCase
      return s.replace(/ (\w)/g, (match, p1) => p1.toUpperCase());
    }


    function doGet() {
      // Ajuste o nome do arquivo HTML principal aqui se ele mudou
      return HtmlService.createHtmlOutputFromFile('Login')
        .setTitle('Portal de Compras')
        .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);
    }

    function incluir(pagina) {
      return HtmlService.createTemplateFromFile(pagina).evaluate().getContent();
    }

    function validarLogin(usuario, senha, empresaSelecionada) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        return { status: 'erro', message: 'Nenhum usu√°rio cadastrado.' };
      }
      const dados = sheet.getRange(2, 1, lastRow - 1, 7).getValues(); // L√™ at√© a coluna 7 (Empresas)

      // Obt√©m lista de empresas para exibir nome (busca na tabela "Empresas")
      const empresasSheet = SpreadsheetApp.getActive().getSheetByName('Empresas');
      let empresasLista = {};
      if (empresasSheet && empresasSheet.getLastRow() >= 2) {
        const empresasData = empresasSheet.getRange(2, 1, empresasSheet.getLastRow() - 1, 2).getValues();
        empresasData.forEach(([codigo, nome]) => {
          empresasLista[String(codigo).trim()] = String(nome).trim();
        });
      }

      for (let i = 0; i < dados.length; i++) {
        const [id, nome, user, passHashDaPlanilha, perfil, status, empresasStr] = dados[i];


        // 1. Gera o hash da senha que o usu√°rio digitou no formul√°rio.
        const senhaDigitadaHash = gerarHash(String(senha));

        // 2. Compara o nome de usu√°rio E o HASH da senha.
        if (String(usuario) === String(user) && senhaDigitadaHash === passHashDaPlanilha) {

            if (status === 'Ativo') {
            // Processa lista de empresas permitidas
            //const empresasCodigos = String(empresasStr || '')
            //.split(',')
            //.map(e => e.trim().padStart(3, '0'))
            //.filter(e => e !== "");
            // 1. Pega a lista de c√≥digos de empresa que o usu√°rio tem permiss√£o. (SEU C√ìDIGO)
            const empresasPermitidas = String(empresasStr || '').split(',').map(e => e.trim());

            // 2. Verifica se a empresa que o usu√°rio SELECIONOU est√° na lista de permiss√µes dele.
            if (!empresasPermitidas.includes(String(empresaSelecionada))) {
              return { status: 'erro', message: 'Voc√™ n√£o tem permiss√£o para acessar esta empresa.' };
            }

            // 3. Se a permiss√£o estiver OK, busca os dados COMPLETOS da empresa selecionada.
            //    Isso usa a fun√ß√£o auxiliar que j√° discutimos.
            const empresaObjetoCompleto = _getEmpresaDataById(empresaSelecionada);

            // 4. Se n√£o encontrar os dados da empresa (ex: ID n√£o existe na planilha 'Empresas'), retorna um erro.
            if (!empresaObjetoCompleto) {
              return { status: 'erro', message: `Os dados para a empresa ID ${empresaSelecionada} n√£o foram encontrados.` };
            }
            return {
              status: 'ok',
              idUsuario: id,           // <-- Inclu√≠do aqui
              nomeUsuario: nome,
              nome: nome,       // <-- Inclu√≠do aqui
              perfil: perfil,
              empresa: empresaObjetoCompleto
            };
          } else {
            return { status: 'inativo', message: 'Usu√°rio aguardando aprova√ß√£o do administrador ou inativo' };
          }
        }
      }
      return { status: 'erro', message: 'Usu√°rio ou senha inv√°lidos!' };
    }

    // Crie esta fun√ß√£o auxiliar no seu backend
    function _getEmpresaDataById(id) {
        // Esta fun√ß√£o deve ler sua planilha de 'Empresas'
        // e retornar o objeto da empresa (com id, nome, cnpj, endereco)
        // que corresponde ao ID fornecido.
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Empresas");
        if (!sheet) return null;

        const values = sheet.getDataRange().getValues();
        const headers = values[0];
        const idColumnIndex = headers.findIndex(h => String(h).toUpperCase() === 'ID');

        if (idColumnIndex === -1) return null;

        for (let i = 1; i < values.length; i++) {
          const idNaPlanilha = String(values[i][idColumnIndex]).trim();
          const idProcurado = String(id).trim();

          // Compara os IDs como n√∫meros para ignorar a diferen√ßa de zeros
          if (parseInt(idNaPlanilha, 10) === parseInt(idProcurado, 10)) {
              
              const empresa = {};
              headers.forEach((header, index) => {
                  const chave = toCamelCase(header);
                  let valor = values[i][index];

                  
                  // Se esta √© a coluna do ID, formata o valor para ser uma string
                  // com 3 d√≠gitos, preenchendo com zeros √† esquerda se necess√°rio.
                  if (index === idColumnIndex) {
                      valor = String(valor).padStart(3, '0');
                  }
                  // --- FIM DA CORRE√á√ÉO ---

                  empresa[chave] = valor;
              });
              return empresa; // Retorna o objeto da empresa com o ID j√° formatado
          }
        }
        return null;
      } catch(e) {
        Logger.log("Erro em _getEmpresaDataById: " + e.message);
        return null;
      }
    }

    // ===============================================
    // FUN√á√ïES PARA USUARIOS
    // ===============================================

    /**
     * Cria um novo usu√°rio com empresas permitidas.
     * @param {string} nome Nome do usu√°rio.
     * @param {string} usuario Login do usu√°rio.
     * @param {string} senha Senha do usu√°rio.
     * @param {string} empresasC√≥digos C√≥digos das empresas (ex: "1,2,3").
     * @param {string} [perfil] Perfil do usu√°rio ("usuario" ou "admin"). Opcional.
     * @returns {Object} Objeto status/mensagem.
     */
    function criarUsuario(nome, usuario, senha, empresasCodigos, perfil) {

      // Valida√ß√µes iniciais
      if (!nome || !senha) {
        return { status: 'error', message: 'Nome e senha s√£o obrigat√≥rios.' };
      }
      
      // Verifica se a senha tem pelo menos 6 caracteres
      if (!senha || senha.length < 6) {
        return { status: 'error', message: 'A senha deve ter pelo menos 6 caracteres.' };
      }

      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        
        // Pega todos os usu√°rios existentes para a verifica√ß√£o de duplicidade
        const dadosUsuariosExistentes = sheet.getRange(2, 3, sheet.getLastRow() - 1, 1).getValues().flat();
        
        // GERA O NOME DE USU√ÅRIO √öNICO AQUI
        const novoUsuario = _gerarUsernameUnico(nome, dadosUsuariosExistentes);
        //const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        //const dadosUsuariosExistentes = sheet.getRange(2, 3, sheet.getLastRow() - 1, 1).getValues().flat();
        if (dadosUsuariosExistentes.includes(usuario)) {
          return { status: 'error', message: 'Nome de usu√°rio j√° existe. Escolha outro.' };
        }

      const ids = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues().flat().map(id => parseInt(id)).filter(n => !isNaN(n));
      const novoId = ids.length ? Math.max(...ids) + 1 : 1;

      // GERA O HASH DA SENHA ANTES DE SALVAR
      const senhaHash = gerarHash(senha);

      sheet.appendRow([
        novoId,
        nome,
        usuario,
        senhaHash,
        perfil || 'usuario', // Perfil padr√£o ou informado
        'Inativo',           // Status padr√£o
        empresasCodigos      // Novidade: c√≥digos das empresas permitidas, ex: "1,2"
      ]);
      return { status: 'ok', message: `Solicita√ß√£o para o usu√°rio '${novoUsuario}' enviada. Aguarde ativa√ß√£o pelo Administrador.` };

      } catch (e) {
        Logger.log("Erro em criarUsuario: " + e.message);
        return { status: 'error', message: 'Ocorreu um erro ao criar a solicita√ß√£o.' };
      }
    }

    /**
     * Gera um nome de usu√°rio √∫nico no formato "primeiro.ultimo".
     * Se o nome de usu√°rio j√° existir, adiciona um n√∫mero ao final (ex: joao.silva2).
     * @param {string} nomeCompleto O nome completo do usu√°rio.
     * @param {Array<string>} usuariosExistentes Uma lista de todos os nomes de usu√°rio j√° cadastrados.
     * @returns {string} Um nome de usu√°rio √∫nico.
     */
    function _gerarUsernameUnico(nomeCompleto, usuariosExistentes) {
      if (!nomeCompleto) return '';

      const nomes = nomeCompleto.trim().toLowerCase().split(' ');
      const primeiroNome = nomes[0];
      const ultimoNome = nomes.length > 1 ? nomes[nomes.length - 1] : '';

      let usernameBase = ultimoNome ? `${primeiroNome}.${ultimoNome}` : primeiroNome;
      
      // Normaliza o nome de usu√°rio para remover acentos e caracteres especiais
      usernameBase = usernameBase.normalize('NFD').replace(/[\u0300-\u036f]/g, '');

      // Verifica se o nome de usu√°rio j√° existe e adiciona um sufixo num√©rico se necess√°rio
      let finalUsername = usernameBase;
      let counter = 2;
      while (usuariosExistentes.map(u => u.toLowerCase()).includes(finalUsername)) {
        finalUsername = `${usernameBase}${counter}`;
        counter++;
      }
      
      return finalUsername;
    }

    /**
     * Lista todos os usu√°rios da planilha 'Usuarios'.
     * @returns {Array<Object>} Uma lista de objetos de usu√°rio.
     */
    function listarUsuarios() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      if (!sheet || sheet.getLastRow() < 2) return [];

      const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 7).getValues();

      return data.map(([id, nome, usuario, senha, perfil, status, empresasStr]) => ({
        id: String(id),
        nome: String(nome),
        usuario: String(usuario),
        perfil: String(perfil),
        status: String(status),
        empresas: empresasStr ? String(empresasStr).split(',').map(e => e.trim()) : []
      }));
    }

    function carregarEmpresasPorUsuario(userId, empresasSelecionadas) {
      google.script.run.withSuccessHandler(function(empresas) {
        const container = document.getElementById(`empresas-${userId}`);
        if (!container) return;

        container.innerHTML = empresas.map(emp => {
          const codigo = String(emp.codigo).trim();
          const checked = selecionadas.includes(codigo) ? 'checked' : '';
          return `<label style="display:block;">
                    <input type="checkbox" value="${emp.codigo}" ${checked}>
                    ${emp.nome}
                  </label>`;
        }).join('');
      }).listarEmpresas();
    }

    function salvarPermissoesUsuario(userId, listaDeIdsPermitidos, idEmpresaPadrao) {
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheet) throw new Error("Planilha 'Usuarios' n√£o encontrada.");

        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        const indexId = headers.findIndex(h => h.toUpperCase() === 'ID');
        const indexEmpresas = headers.findIndex(h => h.toUpperCase() === 'ID EMPRESA');
        const indexEmpresaPadrao = headers.findIndex(h => h.toUpperCase() === 'ID EMPRESA PADR√ÉO');

        if (indexId === -1 || indexEmpresas === -1 || indexEmpresaPadrao === -1) {
          throw new Error("Colunas 'ID', 'ID EMPRESA' ou 'ID EMPRESA PADR√ÉO' n√£o encontradas.");
        }
        
        const idsUsuarios = sheet.getRange(2, indexId + 1, sheet.getLastRow() - 1, 1).getValues().flat();
        const rowIndexToUpdate = idsUsuarios.findIndex(id => String(id) == String(userId)) + 2;

        if (rowIndexToUpdate < 2) {
          return { status: 'error', message: `Usu√°rio com ID ${userId} n√£o encontrado.` };
        }

        const empresasString = Array.isArray(listaDeIdsPermitidos) ? listaDeIdsPermitidos.join(',') : '';
        
        sheet.getRange(rowIndexToUpdate, indexEmpresas + 1).setValue(empresasString);
        sheet.getRange(rowIndexToUpdate, indexEmpresaPadrao + 1).setValue("'" + (idEmpresaPadrao || ''));

        return { status: 'ok', message: 'Permiss√µes atualizadas com sucesso!' };

      } catch (e) {
        Logger.log(`Erro em salvarPermissoesUsuario: ${e.message}`);
        return { status: 'error', message: `Erro no servidor: ${e.message}` };
      }
    }

    function buscarEmpresasDoUsuario() {
      const usuario = obterUsuarioLogado(); // Sua fun√ß√£o de controle de sess√£o

      const sheet = SpreadsheetApp.getActive().getSheetByName('Empresas');
      const data = sheet.getDataRange().getValues();
      const headers = data[0];
      const colId = headers.indexOf('ID');
      const colNome = headers.indexOf('NOME');

      const empresasPermitidas = [];

      for (let i = 1; i < data.length; i++) {
        const row = data[i];

        // Aqui voc√™ pode adicionar o filtro conforme o usu√°rio logado
        empresasPermitidas.push({
          idEmpresa: row[colId],
          nomeEmpresa: row[colNome]
        });
      }

      return empresasPermitidas;
    }

    function registrarEmpresaSelecionadaNoLogin(empresaId) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('USUARIO_LOGADO');
      sheet.getRange(2, 1).setValue(empresaId); // Exemplo simples, adapte conforme seu controle
    }

    function obterUsuarioLogado() {
      const ss = SpreadsheetApp.getActiveSpreadsheet();
      const sheet = ss.getSheetByName('usuario_logado');
      if (!sheet) throw new Error("Planilha 'usuario_logado' n√£o encontrada.");

      const data = sheet.getDataRange().getValues();
      if (data.length <= 1) return null; // Sem dados

      const headers = data[0];
      const idxIdUsuario = headers.indexOf("ID_USUARIO");
      const idxNomeUsuario = headers.indexOf("NOME_USUARIO");
      const idxIdEmpresa = headers.indexOf("ID_EMPRESA");
      const idxNomeEmpresa = headers.indexOf("NOME_EMPRESA");
      const idxDataLogin = headers.indexOf("DATA_LOGIN");

      if ([idxIdUsuario, idxNomeUsuario, idxIdEmpresa, idxNomeEmpresa, idxDataLogin].includes(-1)) {
        throw new Error("Colunas necess√°rias n√£o encontradas na planilha 'usuario_logado'.");
      }

      // Encontra a linha com a DATA_LOGIN mais recente
      let ultimoRegistro = null;
      let dataMaisRecente = new Date(0); // data m√≠nima para iniciar

      for (let i = 1; i < data.length; i++) {
        const linha = data[i];
        const dataLogin = new Date(linha[idxDataLogin]);
        if (dataLogin > dataMaisRecente) {
          dataMaisRecente = dataLogin;
          ultimoRegistro = linha;
        }
      }

      if (!ultimoRegistro) return null;

      return {
        idUsuario: ultimoRegistro[idxIdUsuario],
        nomeUsuario: ultimoRegistro[idxNomeUsuario],
        idEmpresa: ultimoRegistro[idxIdEmpresa],
        nomeEmpresa: ultimoRegistro[idxNomeEmpresa],
        dataLogin: dataMaisRecente
      };
    }

    function registrarLoginUsuario(idUsuario, nomeUsuario, idEmpresa, nomeEmpresa) {
      const ss = SpreadsheetApp.getActive();
      const sheet = ss.getSheetByName('usuario_logado');
      
      if (!sheet) {
        throw new Error('Planilha usuario_logado n√£o encontrada.');
      }
      
      const dataHoraLogin = new Date();
      // For√ßa os IDs a serem tratados como texto pela planilha adicionando um ap√≥strofo.
      // Isso previne que "001" se torne 1.
      const idUsuarioTexto = "'" + idUsuario;
      const idEmpresaTexto = "'" + idEmpresa;
      const dados = sheet.getDataRange().getValues();
      // Supondo que a primeira linha seja cabe√ßalho
      let linhaExistente = -1;
      
      for (let i = 1; i < dados.length; i++) {
        if (dados[i][0] == idUsuario) {  // Coluna 0 = ID_USUARIO
          linhaExistente = i + 1; // √çndice da linha real na planilha (1-based)
          break;
        }
      }
      
      if (linhaExistente > 0) {
        // Atualiza registro existente
        sheet.getRange(linhaExistente, 1).setValue(idUsuarioTexto);   // ID_USUARIO
        sheet.getRange(linhaExistente, 2).setValue(nomeUsuario);   // NOME_USUARIO
        sheet.getRange(linhaExistente, 3).setValue(idEmpresaTexto);     // ID_EMPRESA
        sheet.getRange(linhaExistente, 4).setValue(nomeEmpresa);   // NOME_EMPRESA
        sheet.getRange(linhaExistente, 5).setValue(dataHoraLogin); // DATA_LOGIN
      } else {
        // Insere novo registro no final
        sheet.appendRow([idUsuarioTexto, nomeUsuario, idEmpresaTexto, nomeEmpresa, dataHoraLogin]);
      }
      
      return { status: 'ok', message: 'Usu√°rio logado registrado com sucesso.' };
    }

    function obterEmpresasDoUsuario(username) {
      try {
        if (!username) return null;

        const sheetUsuarios = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheetUsuarios || sheetUsuarios.getLastRow() < 2) return null;

        const dataUsuarios = sheetUsuarios.getDataRange().getValues();
        const headersUsuarios = dataUsuarios[0].map(h => String(h).toUpperCase());

        const indexUser = headersUsuarios.indexOf('USUARIO');
        const indexStatus = headersUsuarios.indexOf('STATUS');
        const indexEmpresasStr = headersUsuarios.indexOf('ID EMPRESA');
        const indexEmpresaPadrao = headersUsuarios.indexOf('ID EMPRESA PADR√ÉO');

        if (indexUser === -1 || indexStatus === -1 || indexEmpresasStr === -1) {
          throw new Error("Cabe√ßalhos 'USUARIO', 'STATUS' ou 'ID EMPRESA' n√£o encontrados na planilha 'Usuarios'.");
        }

        const usuarioEncontrado = dataUsuarios.find(row => String(row[indexUser]).trim().toLowerCase() === username.trim().toLowerCase());

        if (!usuarioEncontrado || usuarioEncontrado[indexStatus].toUpperCase() !== 'ATIVO') {
          return null;
        }
        
        const idEmpresaPadrao = (indexEmpresaPadrao > -1) ? usuarioEncontrado[indexEmpresaPadrao] : null;
        const idsEmpresasString = String(usuarioEncontrado[indexEmpresasStr] || '').trim();

        if (!idsEmpresasString) {
          return { defaultEmpresaId: null, empresas: [] };
        }

        // Padroniza a lista de IDs permitidos para o usu√°rio (ex: '1' vira '001')
        const idsPermitidosPadronizados = idsEmpresasString.split(',').map(id => id.trim().padStart(3, '0'));
      
        const sheetEmpresas = SpreadsheetApp.getActive().getSheetByName('Empresas');
        if (!sheetEmpresas) return { defaultEmpresaId: idEmpresaPadrao, empresas: [] };
        const dadosEmpresas = sheetEmpresas.getRange(2, 1, sheetEmpresas.getLastRow() - 1, 2).getValues();
        const empresasPermitidas = dadosEmpresas
          // Compara a lista padronizada com os IDs da planilha de empresas, tamb√©m padronizados
          .filter(empresaRow => idsPermitidosPadronizados.includes(String(empresaRow[0]).trim().padStart(3, '0')))
          .map(empresaRow => ({
            id: String(empresaRow[0]).trim().padStart(3, '0'),
            nome: String(empresaRow[1]).trim()
          }));

        return {
          defaultEmpresaId: idEmpresaPadrao ? String(idEmpresaPadrao).trim().padStart(3, '0') : null,
          empresas: empresasPermitidas
        };

      } catch (e) {
        Logger.log('Erro em obterEmpresasDoUsuario: ' + e.message);
        return { error: e.message };
      }
    }

    /**
     * Altera o status de um usu√°rio na planilha 'Usuarios'.
     * @param {string} userId - O ID do usu√°rio.
     * @param {string} novoStatus - O novo status (ex: 'Ativo', 'Inativo').
     * @returns {Object} Um objeto com status e mensagem.
     */
    function alterarStatusUsuario(userId, novoStatus) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      if (!sheet) {
        Logger.log('[alterarStatusUsuario - SERVER] Planilha "Usuarios" n√£o encontrada.');
        return { status: 'error', message: 'Planilha "Usuarios" n√£o encontrada.' };
      }

      Logger.log(`[alterarStatusUsuario - SERVER] Tentando alterar status para userId: ${userId}, novoStatus: ${novoStatus}`);
      
      // Busca o usu√°rio pelo ID na primeira coluna (coluna 1)
      const lastRow = sheet.getLastRow();
      const idsColumn = sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // Obt√©m apenas a coluna de IDs
      let rowIndexToUpdate = -1;

      for (let i = 0; i < idsColumn.length; i++) {
        if (String(idsColumn[i][0]).trim() === String(userId).trim()) {
          rowIndexToUpdate = i + 2; // +2 porque os dados come√ßam na linha 2 e o √≠ndice do array √© 0-based
          break;
        }
      }

      if (rowIndexToUpdate !== -1) {
        // A coluna de status √© a 6¬™ coluna (√≠ndice 5 no array getValues)
        sheet.getRange(rowIndexToUpdate, 6).setValue(novoStatus);
        Logger.log(`[alterarStatusUsuario - SERVER] Status do usu√°rio ${userId} alterado para ${novoStatus} na linha ${rowIndexToUpdate}.`);
        return { status: 'ok', message: `Status do usu√°rio ${userId} atualizado para ${novoStatus}.` };
      } else {
        Logger.log(`[alterarStatusUsuario - SERVER] Usu√°rio ${userId} n√£o encontrado para altera√ß√£o de status.`);
        return { status: 'error', message: `Usu√°rio ${userId} n√£o encontrado.` };
      }
    }

    /**
     * Exclui um usu√°rio da planilha 'Usuarios'.
     * @param {string} userId - O ID do usu√°rio a ser exclu√≠do.
     * @returns {Object} Um objeto com status e mensagem.
     */
    function excluirUsuario(userId) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      if (!sheet) {
        Logger.log('[excluirUsuario - SERVER] Planilha "Usuarios" n√£o encontrada.');
        return { status: 'error', message: 'Planilha "Usuarios" n√£o encontrada.' };
      }

      Logger.log(`[excluirUsuario - SERVER] Tentando excluir userId: ${userId}`);

      const lastRow = sheet.getLastRow();
      const idsColumn = sheet.getRange(2, 1, lastRow - 1, 1).getValues(); // Obt√©m apenas a coluna de IDs
      let rowIndexToDelete = -1;

      for (let i = 0; i < idsColumn.length; i++) {
        if (String(idsColumn[i][0]).trim() === String(userId).trim()) {
          rowIndexToDelete = i + 2; // +2 porque os dados come√ßam na linha 2 e o √≠ndice do array √© 0-based
          break;
        }
      }

      if (rowIndexToDelete !== -1) {
        sheet.deleteRow(rowIndexToDelete);
        Logger.log(`[excluirUsuario - SERVER] Usu√°rio ${userId} exclu√≠do da linha ${rowIndexToDelete}.`);
        return { status: 'ok', message: `Usu√°rio ${userId} exclu√≠do com sucesso.` };
      } else {
        Logger.log(`[excluirUsuario - SERVER] Usu√°rio ${userId} n√£o encontrado para exclus√£o.`);
        return { status: 'error', message: `Usu√°rio ${userId} n√£o encontrado.` };
      }
    }

    /**
     * Altera o perfil de um usu√°rio na planilha 'Usuarios'.
     * @param {string} userId - O ID do usu√°rio.
     * @param {string} novoPerfil - O novo perfil (ex: 'admin', 'usuario').
     * @returns {Object} Um objeto com status e mensagem.
     */
    function alterarPerfilUsuario(userId, novoPerfil) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      if (!sheet) {
        return { status: 'error', message: 'Planilha "Usuarios" n√£o encontrada.' };
      }
      const lastRow = sheet.getLastRow();
      const idsColumn = sheet.getRange(2, 1, lastRow - 1, 1).getValues();
      let rowIndexToUpdate = -1;

      for (let i = 0; i < idsColumn.length; i++) {
        if (String(idsColumn[i][0]).trim() === String(userId).trim()) {
          rowIndexToUpdate = i + 2;
          break;
        }
      }
      if (rowIndexToUpdate !== -1) {
        // A coluna de perfil √© a 5¬™ coluna
        sheet.getRange(rowIndexToUpdate, 5).setValue(novoPerfil);
        return { status: 'ok', message: `Perfil do usu√°rio ${userId} alterado para ${novoPerfil}.` };
      } else {
        return { status: 'error', message: `Usu√°rio ${userId} n√£o encontrado.` };
      }
    }

    /**
     * Salva as permiss√µes de um usu√°rio e define a primeira empresa da lista como padr√£o.
     * @param {string} idUsuario - O ID do usu√°rio a ser atualizado.
     * @param {string} empresasCodigosStr - A string com os c√≥digos das empresas, separados por v√≠rgula (ex: "003,001,002").
     */
    function salvarPermissoesDeEmpresaParaUsuario(idUsuario, empresasCodigosStr) {
      Logger.log(`--- [DIAGN√ìSTICO SALVAR PERMISS√ïES] ---`);
      Logger.log(`1. Fun√ß√£o iniciada. ID do Usu√°rio: "${idUsuario}", String de Empresas: "${empresasCodigosStr}"`);
      
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheet) throw new Error("Planilha 'Usuarios' n√£o encontrada.");

        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        Logger.log(`2. Cabe√ßalhos lidos da planilha 'Usuarios': [${headers.join(', ')}]`);

        const headersUpperCase = headers.map(h => String(h).toUpperCase());
        
        // Encontra os √≠ndices das colunas
        const indexIdUsuario = headersUpperCase.indexOf('ID');
        const indexEmpresasPermitidas = headersUpperCase.indexOf('ID EMPRESA');
        const indexEmpresaPadrao = headersUpperCase.indexOf('ID EMPRESA PADR√ÉO');
        
        Logger.log(`3. √çndices encontrados -> ID: ${indexIdUsuario}, ID EMPRESA: ${indexEmpresasPermitidas}, ID EMPRESA PADR√ÉO: ${indexEmpresaPadrao}`);

        if (indexIdUsuario === -1 || indexEmpresasPermitidas === -1 || indexEmpresaPadrao === -1) {
          throw new Error("Uma ou mais colunas necess√°rias (ID, ID EMPRESA, ID EMPRESA PADR√ÉO) n√£o foram encontradas. Verifique os nomes exatos na planilha.");
        }

        // Encontra a linha do usu√°rio
        const ids = sheet.getRange(2, indexIdUsuario + 1, sheet.getLastRow() - 1, 1).getValues().flat();
        const rowIndexToUpdate = ids.findIndex(id => String(id) == String(idUsuario)) + 2;
        Logger.log(`4. Procurando pelo ID de usu√°rio "${idUsuario}". Linha encontrada: ${rowIndexToUpdate > 1 ? rowIndexToUpdate : 'NENHUMA'}`);

        if (rowIndexToUpdate < 2) {
          return { status: 'error', message: `Usu√°rio com ID ${idUsuario} n√£o encontrado.` };
        }

        // L√≥gica para definir a empresa padr√£o
        const codigosArray = String(empresasCodigosStr || '').split(',').map(c => c.trim()).filter(String);
        const idEmpresaPadrao = (codigosArray.length > 0) ? codigosArray[0] : '';
        Logger.log(`5. L√≥gica da empresa padr√£o -> Primeiro ID da lista √©: "${idEmpresaPadrao}"`);

        Logger.log(`6. TENTANDO ESCREVER NA PLANILHA...`);
        Logger.log(`   - Linha: ${rowIndexToUpdate}`);
        Logger.log(`   - Coluna de Permiss√µes (√≠ndice ${indexEmpresasPermitidas}): Escrevendo o valor "${empresasCodigosStr}"`);
        sheet.getRange(rowIndexToUpdate, indexEmpresasPermitidas + 1).setValue(empresasCodigosStr);
        
        Logger.log(`   - Coluna Padr√£o (√≠ndice ${indexEmpresaPadrao}): Escrevendo o valor "'${idEmpresaPadrao}"`);
        sheet.getRange(rowIndexToUpdate, indexEmpresaPadrao + 1).setValue("'" + idEmpresaPadrao);
        
        Logger.log(`7. Escrita na planilha conclu√≠da com sucesso.`);
        return { status: 'ok', message: 'Permiss√µes e empresa padr√£o atualizadas com sucesso!' };

      } catch (e) {
        Logger.log(`--- [DIAGN√ìSTICO SALVAR PERMISS√ïES] ERRO FATAL: ${e.message} ---`);
        return { status: 'error', message: `Erro no servidor: ${e.message}` };
      }
    }


    // ===============================================
    // FUN√á√ïES PARA FORNECEDORES
    // ===============================================

    function getProximoCodigoFornecedor() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Fornecedores');
      if (sheet.getLastRow() < 2) return '0001';

      const codigos = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues();
      const numeros = codigos.flat()
        .map(c => parseInt(c))
        .filter(n => !isNaN(n));

      const proximo = numeros.length ? Math.max(...numeros) + 1 : 1;
      return proximo.toString().padStart(4, '0');
    }

    function getCondicoesPagamento() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Config');
      if (!sheet) {
        Logger.log('ERRO: Planilha "Config" n√£o encontrada! Verifique o nome da aba.');
        return [];
      }
      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        return [];
      }
      const dados = sheet.getRange(2, 1, lastRow - 1, 1).getValues();
      return dados.flat().filter(e => e !== '');
    }

    function getFormasPagamento() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Config');
      if (!sheet) {
        Logger.log('ERRO: Planilha "Config" n√£o encontrada! Verifique o nome da aba.');
        return [];
      }
      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        return [];
      }
      const dados = sheet.getRange(2, 2, lastRow - 1, 1).getValues();
      return dados.flat().filter(e => e !== '');
    }

    function salvarFornecedor(fornecedor) {
      try {
        // 1. Limpa o CNPJ, deixando apenas os n√∫meros
        const cnpjLimpo = String(fornecedor.cnpj).replace(/\D/g, '');
        if (cnpjLimpo.length !== 14) {
          throw new Error("O CNPJ deve conter 14 d√≠gitos.");
        }
      const sheet = SpreadsheetApp.getActive().getSheetByName('Fornecedores');
      const data = sheet.getDataRange().getValues(); // Todas as linhas e colunas


      // Descubra em qual coluna est√° o CNPJ (assumindo headers na primeira linha)
      const header = data[0];
      const cnpjColIndex = header.findIndex(h => h.toString().toUpperCase().includes('CNPJ'));
      if (cnpjColIndex === -1) {
        return { status: 'error', message: 'Coluna CNPJ n√£o encontrada.' };
      }

      // Verifica se o CNPJ j√° existe na planilha
        const cnpjJaExiste = data.slice(1).some(row => {
          // Limpa o CNPJ de cada linha da planilha para comparar apenas os n√∫meros
          const cnpjDaLinha = String(row[cnpjColIndex] || '').replace(/\D/g, '');
          return cnpjDaLinha === cnpjLimpo;
        });

        if (cnpjJaExiste) {
          return { status: 'error', message: 'J√° existe um fornecedor cadastrado com este CNPJ!' };
        }

      const codigoFornecedorTexto = "'" + fornecedor.codigo;

      sheet.appendRow([
        codigoFornecedorTexto, // Usa o c√≥digo que veio do formul√°rio
        fornecedor.razao,
        fornecedor.fantasia,
        fornecedor.cnpj,
        fornecedor.endereco,
        fornecedor.condicao,
        fornecedor.forma,
        "",
        "",
        'INATIVO',
        fornecedor.estado
      ]);
      return { status: 'INATIVO', message: "Fornecedor salvo com sucesso, solicite a ativa√ß√£o ao administrador!" };
    } catch (e) {
        Logger.log(`Erro em salvarFornecedor: ${e.message}`);
        return { status: 'error', message: `Erro no servidor: ${e.message}` };
      }
    }

    /**
     * Retorna uma lista completa de TODOS os fornecedores para a tela de gerenciamento.
     */
    function getFornecedoresParaGerenciar() {
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Fornecedores");
        if (!sheet || sheet.getLastRow() < 2) {
          return []; 
        }

        const data = sheet.getDataRange().getValues();
        const headers = data[0];

        const fornecedores = [];
        // Come√ßa em i = 1 para pular o cabe√ßalho
        for (let i = 1; i < data.length; i++) {
          const row = data[i];
          const fornecedor = {};
          headers.forEach((header, index) => {
            fornecedor[toCamelCase(header)] = row[index];
          });
          fornecedores.push(fornecedor);
        }

        return fornecedores;

      } catch (e) {
        Logger.log("Erro em getFornecedoresParaGerenciar: " + e.message);
        return [];
      }
    }

    /**
     * Cria um novo fornecedor ou atualiza um existente de forma segura.
     * VERS√ÉO CORRIGIDA que n√£o apaga o c√≥digo ao editar.
     */
    function adicionarOuAtualizarFornecedor(fornecedorObject) {
      Logger.log("--- [DIAGN√ìSTICO SALVAR] ---");
      Logger.log("1. Objeto recebido do frontend: " + JSON.stringify(fornecedorObject));
      
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Fornecedores");
        if (!sheet) {
          throw new Error("A planilha 'Fornecedores' n√£o foi encontrada.");
        }
        
        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0]
                            .map(h => String(h).toUpperCase().trim());
        Logger.log("2. Cabe√ßalhos encontrados na planilha: [" + headers.join(', ') + "]");

        // Fun√ß√£o auxiliar para encontrar o √≠ndice de uma coluna ou retornar um erro claro
        const findHeaderIndex = (possibleNames) => {
          for (const name of possibleNames) {
            const index = headers.indexOf(name);
            if (index !== -1) {
              return index;
            }
            return -1;
          }
          throw new Error(`Nenhuma das colunas esperadas (${possibleNames.join(', ')}) foi encontrada. Verifique os cabe√ßalhos da planilha "Fornecedores".`);
        };

        // Adapte os nomes dos cabe√ßalhos abaixo para corresponderem √† sua planilha
        const indexCodigo = headers.indexOf('ID');
        const indexRazao = headers.indexOf('RAZAO SOCIAL');
        const indexFantasia = headers.indexOf('NOME FANTASIA');
        const indexCnpj = headers.indexOf('CNPJ');
        const indexEndereco = headers.indexOf('ENDERECO');
        const indexCondicao = headers.indexOf('CONDICAO DE PAGAMENTO');
        const indexForma = headers.indexOf('FORMA DE PAGAMENTO');
        const indexGrupo = headers.indexOf('GRUPO');
        const indexStatus = headers.indexOf('STATUS');
        Logger.log(`3. √çndices encontrados -> C√≥digo: ${indexCodigo}, Raz√£o: ${indexRazao}, Condi√ß√£o: ${indexCondicao}, Forma: ${indexForma}`);

        // Valida√ß√£o para garantir que as colunas essenciais foram encontradas
        if ([indexCodigo, indexRazao, indexFantasia, indexCnpj, indexEndereco, indexCondicao, indexForma, indexGrupo, indexStatus].includes(-1)) {
            throw new Error("Uma ou mais colunas essenciais n√£o foram encontradas. Verifique os nomes no log acima.");
        }
        // Verifica se √© uma atualiza√ß√£o (se um c√≥digo foi enviado)
        if (fornecedorObject.codigo) {
          Logger.log("4. Modo ATUALIZA√á√ÉO detectado.");
          // --- L√ìGICA DE ATUALIZA√á√ÉO SEGURA ---
          const codigos = sheet.getRange(2, indexCodigo + 1, sheet.getLastRow() - 1, 1).getValues().flat();
          const rowIndexToUpdate = codigos.findIndex(codigo => String(codigo) == String(fornecedorObject.codigo)) + 2;
          Logger.log(`5. Procurando pelo c√≥digo "${fornecedorObject.codigo}". Linha encontrada: ${rowIndexToUpdate > 1 ? rowIndexToUpdate : 'NENHUMA'}`);

          if (rowIndexToUpdate > 1) {
            // Atualiza apenas as c√©lulas necess√°rias, preservando o resto da linha
            sheet.getRange(rowIndexToUpdate, indexRazao + 1).setValue(fornecedorObject.razaoSocial);
            sheet.getRange(rowIndexToUpdate, indexFantasia + 1).setValue(fornecedorObject.nomeFantasia);
            sheet.getRange(rowIndexToUpdate, indexCnpj + 1).setValue(fornecedorObject.cnpj);
            sheet.getRange(rowIndexToUpdate, indexEndereco + 1).setValue(fornecedorObject.endereco);
            sheet.getRange(rowIndexToUpdate, indexCondicao + 1).setValue(fornecedorObject.condicaoPagamento);
            sheet.getRange(rowIndexToUpdate, indexForma + 1).setValue(fornecedorObject.formaPagamento);
            sheet.getRange(rowIndexToUpdate, indexGrupo + 1).setValue(fornecedorObject.grupo);
            
            return { status: 'ok', message: 'Fornecedor atualizado com sucesso!' };
          } else {
            return { status: 'error', message: 'Fornecedor para atualiza√ß√£o n√£o encontrado.' };
          }

        } else {
          // --- L√ìGICA DE CRIA√á√ÉO ---
          const ids = sheet.getRange(2, indexCodigo + 1, sheet.getLastRow() - 1, 1).getValues().flat().map(id => parseInt(id)).filter(n => !isNaN(n));
          const novoId = ids.length ? Math.max(...ids) + 1 : 1;
          
          const newRowData = [];
          newRowData[indexCodigo] = "'" + novoId;
          newRowData[indexRazao] = fornecedorObject.razaoSocial;
          newRowData[indexFantasia] = fornecedorObject.nomeFantasia;
          newRowData[indexCnpj] = fornecedorObject.cnpj;
          newRowData[indexEndereco] = fornecedorObject.endereco;
          newRowData[indexCondicao] = fornecedorObject.condicaoPagamento;
          newRowData[indexForma] = fornecedorObject.formaPagamento;
          newRowData[indexGrupo] = fornecedorObject.grupo;
          if (indexStatus > -1) newRowData[indexStatus] = 'Ativo';

          sheet.appendRow(newRowData);
          return { status: 'ok', message: 'Fornecedor adicionado com sucesso!' };
        }
      } catch (e) {
        Logger.log("Erro em adicionarOuAtualizarFornecedor: " + e.message);
        return { status: 'error', message: 'Erro ao salvar o fornecedor.' };
      }
    }

    /**
     * Exclui um fornecedor da planilha.
     */
    function excluirFornecedor(codigoFornecedor) {
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Fornecedores");
        const codigos = sheet.getRange(2, 1, sheet.getLastRow() - 1, 1).getValues().flat();
        const rowIndexToDelete = codigos.findIndex(codigo => String(codigo) == String(codigoFornecedor)) + 2;

        if (rowIndexToDelete > 1) {
          sheet.deleteRow(rowIndexToDelete);
          return { status: 'ok', message: 'Fornecedor exclu√≠do com sucesso!' };
        } else {
          return { status: 'error', message: 'Fornecedor n√£o encontrado para exclus√£o.' };
        }
      } catch (e) {
        Logger.log("Erro em excluirFornecedor: " + e.message);
        return { status: 'error', message: 'Erro ao excluir o fornecedor.' };
      }
    }

    /**
     * Altera o status de um fornecedor para 'Inativo' na planilha.
     * @param {string} codigoFornecedor - O c√≥digo do fornecedor a ser inativado.
     * @returns {object} Um objeto com o status da opera√ß√£o.
     */
    function alternarStatusFornecedor(codigoFornecedor) {
      Logger.log("alternarStatusFornecedor - codigoFornecedor recebido: " + codigoFornecedor)
      if (!codigoFornecedor) {
        return { status: 'error', message: 'C√≥digo do fornecedor n√£o fornecido.' };
      }

      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Fornecedores");
        if (!sheet) {
          throw new Error('Planilha "Fornecedores" n√£o encontrada.');
        }

        const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
        
        const indexCodigo = headers.findIndex(h => ['CODIGO', 'ID'].includes(h.toUpperCase()));
        const indexStatus = headers.findIndex(h => h.toUpperCase() === 'STATUS');

        if (indexCodigo === -1 || indexStatus === -1) {
          throw new Error('Coluna "Codigo" ou "Status" n√£o encontrada na planilha "Fornecedores".');
        }

        const codigos = sheet.getRange(2, indexCodigo + 1, sheet.getLastRow() - 1, 1).getValues().flat();
        const rowIndexToUpdate = codigos.findIndex(codigo => parseInt(codigo) === parseInt(codigoFornecedor)) + 2;

        if (rowIndexToUpdate > 1) {
          const statusCell = sheet.getRange(rowIndexToUpdate, indexStatus + 1);
          const statusAtual = statusCell.getValue().toString().trim().toUpperCase();
          
          // L√≥gica do "interruptor"
          const novoStatus = (statusAtual === 'ATIVO') ? 'Inativo' : 'Ativo';
          
          statusCell.setValue(novoStatus);
          
          return { status: 'ok', message: `Fornecedor definido como '${novoStatus}' com sucesso!` };
        } else {
          return { status: 'error', message: 'Fornecedor n√£o encontrado para alterar o status.' };
        }
      } catch (e) {
        Logger.log("Erro em alternarStatusFornecedor: " + e.message);
        return { status: 'error', message: 'Erro ao alterar o status do fornecedor.' };
      }
    }

    /**
     * Consulta um CNPJ em uma API externa e retorna os dados da empresa.
     * @param {string} cnpj - O CNPJ a ser consultado.
     * @returns {object} Um objeto com o status da opera√ß√£o e os dados da empresa.
     */
    function consultarCnpj(cnpj) {
      try {
        // 1. Limpa o CNPJ, deixando apenas os n√∫meros
        const cnpjLimpo = String(cnpj).replace(/\D/g, '');
        if (cnpjLimpo.length !== 14) {
          throw new Error("O CNPJ deve conter 14 d√≠gitos.");
        }
        
        // 2. Monta a URL da API para a consulta
        const apiUrl = `https://brasilapi.com.br/api/cnpj/v1/${cnpjLimpo}`;
        
        // 3. Faz a chamada para a API externa
        const response = UrlFetchApp.fetch(apiUrl, { muteHttpExceptions: true });
        const responseCode = response.getResponseCode();
        const responseText = response.getContentText();
        
        if (responseCode === 200) {
          // 4. Se a resposta for bem-sucedida, analisa os dados
          const dadosApi = JSON.parse(responseText);
          
          // 5. Retorna um objeto limpo e padronizado
          return {
            status: 'ok',
            data: {
              razaoSocial: dadosApi.razao_social,
              nomeFantasia: dadosApi.nome_fantasia,
              endereco: `${dadosApi.logradouro}, ${dadosApi.numero}. ${dadosApi.bairro}`,
              uf: dadosApi.uf
              // Adicione outros campos que desejar
            }
          };
        } else {
          // Se a API retornar um erro (ex: CNPJ n√£o encontrado)
          const erroApi = JSON.parse(responseText);
          return { status: 'error', message: erroApi.message || 'CNPJ n√£o encontrado ou inv√°lido.' };
        }
      } catch (e) {
        Logger.log("Erro em consultarCnpj: " + e.message);
        return { status: 'error', message: 'Erro ao consultar o CNPJ. Verifique o console do servidor.' };
      }
    }

    function getEstados() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Config');
      if (!sheet) {
        Logger.log('ERRO: Planilha "Config" n√£o encontrada! Verifique o nome da aba.');
        return [];
      }
      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        return [];
      }
      
      // Busca os dados das colunas D (UF) e E (Nome do Estado)
      const dados = sheet.getRange(3, 4, lastRow - 1, 2).getValues();
      
      // Filtra e formata os dados para o padr√£o esperado pelo frontend
      return dados
        .filter(([uf, nome]) => uf && nome) // Remove linhas vazias
        .map(([uf, nome]) => ({
          value: String(uf).trim(),
          text: String(nome).trim()
        }));
    }

    // ===============================================
    // FUN√á√ïES PARA PEDIDOS DE COMPRA
    // ===============================================

    /**
     * Retorna o pr√≥ximo n√∫mero sequencial para um novo pedido.
     * Cria a planilha 'Pedidos' se n√£o existir.
     * @returns {string} O pr√≥ximo n√∫mero de pedido formatado como '0001'.
     */
    function getProximoNumeroPedido(empresaCodigo) {
      const spreadsheet = SpreadsheetApp.getActive();
      let sheet = spreadsheet.getSheetByName('Pedidos');

      if (!sheet) {
        sheet = spreadsheet.insertSheet('Pedidos');
        const headers = [
          'N√∫mero do Pedido', 'ID da Empresa', 'Data', 'Fornecedor', 'CNPJ Fornecedor',
          'Endere√ßo Fornecedor', 'Condi√ß√£o Pagamento Fornecedor', 'Forma Pagamento Fornecedor',
          'Placa Veiculo', 'Nome Veiculo', 'Observacoes', 'Total Geral', 'Status', 'Itens'
        ];
        sheet.appendRow(headers);
        sheet.getRange('A:B').setNumberFormat('@');
        return '000001';
      }

      const lastRow = sheet.getLastRow();
      if (lastRow < 2) {
        return '000001';
      }

      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const colNumero = headers.findIndex(h => h.toUpperCase() === 'N√öMERO DO PEDIDO');
      const colEmpresa = headers.findIndex(h => ['ID DA EMPRESA', 'ID EMPRESA', 'EMPRESA'].includes(h.toUpperCase()));

      if (colEmpresa === -1 || colNumero === -1) {
        throw new Error('Cabe√ßalhos "ID da Empresa" ou "N√∫mero do Pedido" n√£o encontrados na planilha "Pedidos".');
      }

      const data = sheet.getRange(2, 1, lastRow - 1, sheet.getLastColumn()).getValues();
      const empresaCodigoTratado = String(empresaCodigo).trim();
      
      const numeros = data
        .filter(row => {
          const idNaLinha = String(row[colEmpresa]).trim();
          
          // --- AQUI EST√Å A CORRE√á√ÉO FINAL ---
          // Converte ambos os IDs para n√∫meros antes de comparar.
          // parseInt("1") vira 1. parseInt("001") tamb√©m vira 1. A compara√ß√£o funciona.
          return parseInt(idNaLinha, 10) === parseInt(empresaCodigoTratado, 10);
        })
        .map(row => parseInt(row[colNumero], 10))
        .filter(n => !isNaN(n));

      const proximoNumero = numeros.length > 0 ? Math.max(...numeros) + 1 : 1;
      
      return proximoNumero.toString().padStart(6, '0');
    }


    /**
     * Retorna uma lista de fornecedores (raz√£o social) para preencher o dropdown de pedidos.
     * @returns {Array<Object>} Uma lista de objetos { codigo: string, razao: string, cnpj: string, endereco: string, condicao: string, forma: string }.
     */
    function getFornecedoresList() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Fornecedores');

      if (!sheet || sheet.getLastRow() < 2) return [];
      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, headers.length).getValues();

      // Encontra o √≠ndice da coluna "Status"
      const indexStatus = headers.findIndex(h => h.toUpperCase() === 'STATUS');

      const fornecedores = data
        // FILTRA para incluir apenas os que t√™m status "Ativo"
        .filter(row => indexStatus === -1 || String(row[indexStatus]).trim().toUpperCase() === 'ATIVO')
        .map(row => {

      const [codigo, razao, fantasia, cnpj, endereco, condicao, forma, idEmpresa, grupo, status, estado] = row;
      return {
        codigo: String(codigo),
        razao: String(razao),
        fantasia: String(fantasia),
        cnpj: String(cnpj),
        endereco: String(endereco),
        condicao: String(condicao),
        forma: String(forma),
        grupo: String(grupo || '').trim().toUpperCase(),
        estado: String(estado || '')
        };
      });

      return fornecedores;
    } 

    /**
     * Salva um novo pedido de compra na planilha 'Pedidos'.
     * @param {Object} pedido - Objeto contendo os detalhes do pedido (numero, data, fornecedor, itens, totalGeral, placaVeiculo, nomeVeiculo, observacoes).
     * @returns {Object} Um objeto com status e mensagem.
     */
    function salvarPedido(pedido) {
      console.log('üìã === IN√çCIO salvarPedido ===');
      console.log('üìã Objeto pedido recebido:', JSON.stringify(pedido, null, 2));
      

      
      const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
      if (!sheet) {
        return { status: 'error', message: 'Planilha "Pedidos" n√£o encontrada. Contate o administrador.' };
      }

      // Normalizar o n√∫mero do pedido - aceitar tanto 'numeroPedido' quanto 'numero'
      const numeroPedido = pedido.numeroPedido || pedido.numero;
      console.log('üìã N√∫mero do pedido normalizado:', numeroPedido);
      
      if (!numeroPedido) {
        console.error('‚ùå N√∫mero do pedido n√£o encontrado em:', pedido);
        return { status: 'error', message: 'N√∫mero do pedido √© obrigat√≥rio.' };
      }

      // Normalizar empresa (aceitar empresaId ou empresa)
      const empresaId = pedido.empresaId || pedido.empresa;
      console.log('üìã ID da empresa normalizado:', empresaId);
      
      console.log('üìã Total geral recebido:', pedido.totalGeral);
      console.log('üìã Itens recebidos:', pedido.itens ? pedido.itens.length : 0, 'itens');

      const itensJSON = JSON.stringify(pedido.itens);

      const fornecedoresSheet = SpreadsheetApp.getActive().getSheetByName('Fornecedores');
      let fornecedorCnpj = '';
      let fornecedorEndereco = '';
      let condicaoPagamentoFornecedor = '';
      let formaPagamentoFornecedor = '';
      let estadoFornecedor = '';

      if (fornecedoresSheet) {
        const fornecedoresData = fornecedoresSheet.getRange(2, 1, fornecedoresSheet.getLastRow() - 1, fornecedoresSheet.getLastColumn()).getValues();
        const foundFornecedor = fornecedoresData.find(row => String(row[1]) === pedido.fornecedor); 
        if (foundFornecedor) {
          fornecedorCnpj = String(foundFornecedor[3] || '');
          fornecedorEndereco = String(foundFornecedor[4] || '');
          condicaoPagamentoFornecedor = String(foundFornecedor[5] || '');
          formaPagamentoFornecedor = String(foundFornecedor[6] || '');
          estadoFornecedor = String(foundFornecedor[10] || ''); // Coluna 11 (√≠ndice 10) = Estado
        }
      }

      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const rowData = new Array(headers.length).fill('');

      const dataToSave = {
        'N√∫mero do Pedido': "'" + numeroPedido, // Adiciona o ap√≥strofo
        'Empresa': "'" + empresaId,     // Usar o mesmo nome que est√° em getProximoNumeroPedido
        'Data': formatarDataParaISO(pedido.data),
        'Fornecedor': pedido.fornecedor,
        'CNPJ Fornecedor': fornecedorCnpj,
        'Endere√ßo Fornecedor': fornecedorEndereco,
        'Estado Fornecedor': estadoFornecedor,
        'Condi√ß√£o Pagamento Fornecedor': condicaoPagamentoFornecedor,
        'Forma Pagamento Fornecedor': formaPagamentoFornecedor,
        'Placa Veiculo': pedido.placaVeiculo,
        'Nome Veiculo': pedido.nomeVeiculo,
        'Observacoes': pedido.observacoes,
        'Total Geral': parseFloat(pedido.totalGeral) || 0, // Garantir que √© um n√∫mero
        'Status': 'Em Aberto',
        'Itens': itensJSON,
        'Data Hora Criacao': formatarDataParaISO(new Date()) // Timestamp de cria√ß√£o padronizado
      };



      headers.forEach((header, index) => {
        if (dataToSave.hasOwnProperty(header)) {
          rowData[index] = dataToSave[header];
          console.log(`üìã Mapeando coluna "${header}":`, dataToSave[header]);
        }
      });

      console.log('üìã Dados finais para salvar:', rowData);
      sheet.appendRow(rowData);

      console.log('‚úÖ Pedido salvo com sucesso:', numeroPedido);
      console.log('üìã === FIM salvarPedido ===');
      return { status: 'ok', message: `Pedido ${numeroPedido} salvo com sucesso!` };
    }

    // ===============================================
    // FUN√á√ïES PARA IMPRESSAO
    // ===============================================    

    /**
     * Busca todos os dados de um pedido espec√≠fico para exibi√ß√£o na tela de impress√£o.
     * @param {string} numeroPedido - O n√∫mero do pedido a ser buscado.
     * @returns {Object|null} Objeto com todos os dados do pedido, ou null se n√£o encontrado.
     */
    function getDadosPedidoParaImpressao(numeroPedido) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
      if (!sheet || sheet.getLastRow() < 2) {
        Logger.log(`Planilha 'Pedidos' vazia ou n√£o encontrada ao buscar pedido ${numeroPedido}.`);
        return null;
      }

      const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
      const dados = sheet.getRange(2, 1, sheet.getLastRow() - 1, sheet.getLastColumn()).getValues();

      Logger.log(`[getDadosPedidoParaImpressao] Buscando pedido: "${numeroPedido}"`);

      const pedidoRow = dados.find(row => {
        const sheetNumeroPedido = String(row[0]).trim(); // Pega o valor da primeira coluna e remove espa√ßos
        Logger.log(`[getDadosPedidoParaImpressao] Comparando "${sheetNumeroPedido}" (na planilha) com "${String(numeroPedido).trim()}" (recebido).`);
        return sheetNumeroPedido === String(numeroPedido).trim();
      });
      
      if (!pedidoRow) {
        Logger.log(`Pedido "${numeroPedido}" n√£o encontrado na planilha ap√≥s a busca.`);
        return null;
      }

      const pedidoData = {};
      headers.forEach((header, index) => {
        const camelCaseHeader = toCamelCase(header); // Usa a fun√ß√£o toCamelCase para padronizar
        let value = pedidoRow[index];

        // Converte objetos Date para string formatada (YYYY-MM-DD)
        if (value instanceof Date) {
          value = Utilities.formatDate(value, Session.getScriptTimeZone(), 'yyyy-MM-dd');
        }
        
        pedidoData[camelCaseHeader] = value;
      });

      try {
        pedidoData.itens = JSON.parse(pedidoData.itens || '[]');
      } catch (e) {
        Logger.log(`Erro ao parsear itens JSON para pedido ${numeroPedido}: ${e.message}`);
        pedidoData.itens = [];
      }

      Logger.log(`[getDadosPedidoParaImpressao] Pedido encontrado e processado: ${JSON.stringify(pedidoData)}`);
      return pedidoData;
    }

    function getDadosPedidoParaImpressaoAdmin(numeroPedido, empresaId) {
      console.log(`Buscando pedido ${numeroPedido} da empresa ${empresaId} para admin`);
      
      try {
        // Sua l√≥gica para buscar o pedido espec√≠fico da empresa
        // Exemplo (adapte para sua estrutura):
        
        var sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Pedidos');
        var data = sheet.getDataRange().getValues();
        
        // Encontrar o pedido espec√≠fico
        for (var i = 1; i < data.length; i++) {
          if (data[i][0] == numeroPedido && data[i][1] == empresaId) { // Ajuste os √≠ndices conforme sua planilha
            return {
              numeroDoPedido: data[i][0],
              empresaId: data[i][1],
              data: data[i][2],
              fornecedor: data[i][3],
              totalGeral: data[i][4],
              // ... outros campos
              // Incluir dados da empresa tamb√©m
              enderecoEmpresa: "endere√ßo da empresa",
              cnpjEmpresa: "cnpj da empresa",
              // etc.
            };
          }
        }
        
        return null; // Pedido n√£o encontrado
        
      } catch (error) {
        console.error("Erro ao buscar pedido para admin:", error);
        throw error;
      }
    }

    /**
     * Busca pedidos na planilha 'Pedidos' com base em um termo de busca.
     * O termo de busca pode ser o n√∫mero do pedido ou o nome do fornecedor.
     * @param {string} termoBusca - O termo a ser buscado.
     * @param {string} empresaCodigo - O c√≥digo da empresa (ex: "E001").
     * @returns {Object} Um objeto com status e uma lista de pedidos que correspondem ao termo de busca.
     */
    /**
     * VERS√ÉO DE DIAGN√ìSTICO
     * Busca pedidos com base em um termo e no c√≥digo da empresa, com logs detalhados.
     */
    function buscarPedidos(termoBusca, empresaCodigo) {
      console.log('üîç === IN√çCIO buscarPedidos ===');
      console.log('üîç Termo de busca:', termoBusca);
      console.log('üîç C√≥digo da empresa:', empresaCodigo);
      
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
        if (!sheet) {
          console.error('‚ùå Planilha "Pedidos" n√£o encontrada');
          return { status: "error", data: [], message: "Aba 'Pedidos' n√£o encontrada." };
        }

        const data = sheet.getDataRange().getValues();
        const headers = data[0];
        console.log('üìã Headers da planilha:', headers);
        
        const resultados = [];
        
        const idEmpresaFiltro = String(empresaCodigo).trim();
        const termoNormalizado = (termoBusca || "").toString().toLowerCase().trim();
        console.log('üîç ID empresa filtro:', idEmpresaFiltro);
        console.log('üîç Termo normalizado:', termoNormalizado);

        const colEmpresa = headers.findIndex(h => ["EMPRESA", "IDEMPRESA", "IDDAEMPRESA", "ID DA EMPRESA", "Empresa"].includes(String(h).toUpperCase()));
        const colNumeroPedido = headers.findIndex(h => String(h).toUpperCase() === 'N√öMERO DO PEDIDO');
        const colFornecedor = headers.findIndex(h => String(h).toUpperCase() === 'FORNECEDOR');
        
        console.log('üìç √çndices das colunas:');
        console.log('  - Empresa:', colEmpresa, headers[colEmpresa]);
        console.log('  - N√∫mero do Pedido:', colNumeroPedido, headers[colNumeroPedido]);
        console.log('  - Fornecedor:', colFornecedor, headers[colFornecedor]);

        if (colEmpresa === -1) {
          console.error('‚ùå Coluna da empresa n√£o encontrada');
          return { status: "error", data: [], message: "Coluna da empresa n√£o encontrada." };
        }

        console.log(`üîç Total de linhas para processar: ${data.length - 1}`);
        
        for (let i = 1; i < data.length; i++) {
          const row = data[i];
          const idEmpresaNaLinha = String(row[colEmpresa]).trim();

          console.log(`üìã Linha ${i}: ID empresa na linha: "${idEmpresaNaLinha}", Filtro: "${idEmpresaFiltro}"`);

          if (parseInt(idEmpresaNaLinha, 10) !== parseInt(idEmpresaFiltro, 10)) {
            console.log(`‚è≠Ô∏è Linha ${i}: Empresa n√£o corresponde - pulando`);
            continue;
          }

          console.log(`‚úÖ Linha ${i}: Empresa corresponde - verificando termo de busca`);

          const numeroPedidoNormalizado = String(row[colNumeroPedido] || '').toLowerCase().trim();
          const fornecedorNormalizado = String(row[colFornecedor] || '').toLowerCase().trim();

          console.log(`üîç Linha ${i}: N√∫mero: "${numeroPedidoNormalizado}", Fornecedor: "${fornecedorNormalizado}"`);

          const shouldAddRow = (termoNormalizado === "") || 
                              numeroPedidoNormalizado.includes(termoNormalizado) || 
                              fornecedorNormalizado.includes(termoNormalizado);

          console.log(`üîç Linha ${i}: Deve adicionar? ${shouldAddRow}`);
                              
          if (shouldAddRow) {
            const pedidoData = {};
            headers.forEach((header, index) => {
              let value = row[index];

              // --- AQUI EST√Å A CORRE√á√ÉO FINAL ---
              // Se o valor for um objeto de Data, converte para texto no formato AAAA-MM-DD
              if (value instanceof Date) {
                value = Utilities.formatDate(value, Session.getScriptTimeZone(), 'yyyy-MM-dd');
              }
              // --- FIM DA CORRE√á√ÉO ---

              pedidoData[toCamelCase(header)] = value;
            });

            // O resto da sua l√≥gica de parse e etc.
            pedidoData.totalGeral = parseFloat(pedidoData.totalGeral || 0);
            if (typeof pedidoData.itens === 'string') {
              try {
                pedidoData.itens = JSON.parse(pedidoData.itens);
              } catch (e) {
                pedidoData.itens = [];
              }
            } else if (!Array.isArray(pedidoData.itens)) {
              pedidoData.itens = [];
            }

            console.log(`‚ûï Linha ${i}: Adicionando pedido aos resultados`);
            resultados.push(pedidoData);
          }
        }
        
        console.log(`üìä Total de resultados encontrados: ${resultados.length}`);
        console.log('üîç === FIM buscarPedidos ===');
        
        // Agora o objeto 'resultados' n√£o cont√©m mais objetos de Data e pode ser retornado
        return { status: "success", data: resultados };

      } catch (e) {
        Logger.log(`Erro fatal em buscarPedidos: ${e.message}`);
        return { status: "error", data: [], message: `Erro no servidor: ${e.message}` };
      }
    }


    function listarPedidosPorEmpresa(empresa) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
      if (!sheet) {
        return [];
      }

      const data = sheet.getDataRange().getValues();
      const headers = data[0];
      const pedidos = [];

      const indexEmpresa = headers.indexOf('Empresa');
      if (indexEmpresa === -1) {
        throw new Error('Coluna "Empresa" n√£o encontrada na planilha Pedidos.');
      }

      for (let i = 1; i < data.length; i++) {
        const linha = data[i];
        const empresaDaLinha = String(linha[indexEmpresa]).trim();

        if (empresaDaLinha === String(empresa).trim()) {
          const pedido = {};
          headers.forEach((header, idx) => {
            pedido[header] = linha[idx];
          });
          pedidos.push(pedido);
        }
      }

      return pedidos;
    }

    /**
     * Busca um √∫nico pedido pelo seu n√∫mero e pelo ID da empresa para edi√ß√£o.
     * @param {string} numeroDoPedido - O n√∫mero do pedido a ser encontrado.
     * @param {string} idEmpresa - O ID da empresa √† qual o pedido pertence.
     * @returns {object|null} O objeto do pedido encontrado ou null se n√£o encontrar.
     */
    function getPedidoParaEditar(numeroDoPedido, idEmpresa) {
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Pedidos");
        if (!sheet) throw new Error("Planilha 'Pedidos' n√£o encontrada.");

        const data = sheet.getDataRange().getValues();
        const headers = data[0].map(h => toCamelCase(h));

        // Encontra os √≠ndices das colunas
        const indexNumero = headers.indexOf('numeroDoPedido');
        const indexEmpresa = headers.indexOf('idDaEmpresa') > -1 ? headers.indexOf('idDaEmpresa') : headers.indexOf('empresa');

        if (indexNumero === -1 || indexEmpresa === -1) {
          throw new Error("Colunas 'N√∫mero do Pedido' ou 'ID da Empresa' n√£o encontradas.");
        }

        // Procura pela linha que corresponde ao n√∫mero do pedido E ao ID da empresa
        for (let i = 1; i < data.length; i++) {
          const row = data[i];
          const numPedidoNaLinha = String(row[indexNumero]).trim();
          const idEmpresaNaLinha = String(row[indexEmpresa]).trim();

          if (numPedidoNaLinha == numeroDoPedido && idEmpresaNaLinha == idEmpresa) {
            // Encontrou o pedido, agora monta o objeto
            const pedido = {};
            headers.forEach((header, index) => {
              let value = row[index];
              // Converte a data para um formato de texto padronizado
              if (value instanceof Date) {
                value = Utilities.formatDate(value, Session.getScriptTimeZone(), 'yyyy-MM-dd');
              }
              pedido[header] = value;
            });
            
            // Faz o parse dos itens
            if (typeof pedido.itens === 'string') {
              pedido.itens = JSON.parse(pedido.itens);
            }
            
            return pedido; // Retorna o objeto do pedido encontrado
          }
        }

        return null; // Retorna null se n√£o encontrar o pedido

      } catch (e) {
        Logger.log("Erro em getPedidoParaEditar: " + e.message);
        return null;
      }
    }

    // ===============================================
    // FUN√á√ïES PARA DASHBOARD (NOVAS)
    // ===============================================

    /**
     * Fun√ß√£o auxiliar para obter dados de pedidos de forma padronizada.
     * @returns {Array<Object>} Lista de objetos de pedidos com cabe√ßalhos em camelCase.
     */
    function _getPedidosData(empresa) {
      Logger.log(`[getPedidosData v5] Fun√ß√£o iniciada. Filtro: ${JSON.stringify(empresa)}`);
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
        if (!sheet || sheet.getLastRow() < 2) {
          Logger.log('[getPedidosData v5] Planilha "Pedidos" vazia ou n√£o encontrada.');
          return [];
        }

        const values = sheet.getDataRange().getValues();
        const headers = values[0];
        const indexEmpresa = headers.findIndex(h => ["EMPRESA", "IDEMPRESA", "IDDAEMPRESA"].includes(h.toUpperCase()));

        if (indexEmpresa === -1) {
          Logger.log('[getPedidosData v5] ERRO CR√çTICO: Coluna da empresa n√£o encontrada.');
          return [];
        }
        
        const chaveEmpresa = toCamelCase(headers[indexEmpresa]);

        const pedidos = values.slice(1).map(row => {
          const pedido = {};
          headers.forEach((header, index) => {
            pedido[toCamelCase(header)] = row[index];
          });

          
          // Converte a string de itens em um array de objetos
          if (typeof pedido.itens === 'string' && pedido.itens.trim().startsWith('[')) {
            try {
              pedido.itens = JSON.parse(pedido.itens);
            } catch (e) {
              Logger.log(`Erro ao converter itens para o pedido ${pedido.numeroDoPedido || 'N/A'}: ${e.message}`);
              pedido.itens = []; // Garante que seja um array vazio em caso de erro
            }
          } else if (!Array.isArray(pedido.itens)) {
            // Se n√£o for uma string JSON ou um array, for√ßa a ser um array vazio
            pedido.itens = [];
          }
          

          pedido.totalGeral = parseFloat(pedido.totalGeral || 0);
          return pedido;
        });

        if (empresa && empresa.id != null) {
          const idEmpresa = String(empresa.id).trim();
          const filtrados = pedidos.filter(p => {
            const pedidoEmpresaValor = String(p[chaveEmpresa] || '').trim();
            return pedidoEmpresaValor == idEmpresa;
          });
          Logger.log(`[getPedidosData v5] Filtro aplicado. Encontrados ${filtrados.length} de ${pedidos.length} pedidos.`);
          return filtrados;
        }
        
        return pedidos;

      } catch (e) {
        Logger.log(`[getPedidosData v5] ERRO FATAL: ${e.message}`);
        return [];
      }
    }

    function sanitizePedidos(pedidos) {
      return pedidos.map(pedido => {
        const clone = { ...pedido };
        // Transforma datas em string padronizada
        if (clone.data instanceof Date) {
          clone.data = formatarDataParaISO(clone.data);
        }
        // Se tiver outros campos Date, serialize-os aqui!
        // Remova fun√ß√µes e campos n√£o serializ√°veis, se houver
        return clone;
      });
    }

    /**
     * Retorna os fornecedores mais comprados, do maior para o menor volume.
     * @param {Array<Object>} pedidos - A lista de pedidos J√Å FILTRADA.
     * @returns {Array<Object>} Lista de fornecedores com total comprado.
     */
    function _getTopSuppliersByVolume(empresa) {
      const pedidos = _getPedidosData(empresa);
      const supplierVolumes = {};

      pedidos.forEach(pedido => {
        const fornecedor = pedido.fornecedor || 'Desconhecido';
        const total = pedido.totalGeral || 0;
        supplierVolumes[fornecedor] = (supplierVolumes[fornecedor] || 0) + total;
      });

      const sortedSuppliers = Object.keys(supplierVolumes).map(fornecedor => ({
        fornecedor: fornecedor,
        totalComprado: supplierVolumes[fornecedor]
      })).sort((a, b) => b.totalComprado - a.totalComprado);

      Logger.log(`[Dashboard - _getTopSuppliersByVolume] Fornecedores por volume: ${JSON.stringify(sortedSuppliers)}`);
      return sortedSuppliers;
    }

    /**
     * Retorna os produtos mais pedidos, do maior para o menor volume (quantidade).
     * @param {Array<Object>} pedidos - A lista de pedidos J√Å FILTRADA.
     * @returns {Array<Object>} Lista de produtos com quantidade total pedida.
     */
    function _getTopProductsByVolume(empresa) {
      const pedidos = _getPedidosData(empresa);
      const productQuantities = {};

      pedidos.forEach(pedido => {
        (pedido.itens || []).forEach(item => {
          const produto = item.descricao || 'Produto Desconhecido';
          const quantidade = parseFloat(item.quantidade) || 0;
          productQuantities[produto] = (productQuantities[produto] || 0) + quantidade;
        });
      });

      const sortedProducts = Object.keys(productQuantities).map(produto => ({
        produto: produto,
        totalQuantidade: productQuantities[produto]
      })).sort((a, b) => b.totalQuantidade - a.totalQuantidade);

      Logger.log(`[Dashboard - _getTopProductsByVolume] Produtos por volume: ${JSON.stringify(sortedProducts)}`);
      return sortedProducts;
    }

    /**
     * Retorna um resumo financeiro dos pedidos.
     * @param {Array<Object>} pedidos - A lista de pedidos J√Å FILTRADA.
     * @returns {Object} Resumo financeiro.
     */
    function _getFinancialSummary(empresa) {
      const pedidos = _getPedidosData(empresa);
      let totalGeralPedidos = 0;
      let numeroTotalPedidos = 0;

      pedidos.forEach(pedido => {
        totalGeralPedidos += pedido.totalGeral || 0;
        numeroTotalPedidos++;
      });

      const summary = {
        totalPedidos: numeroTotalPedidos,
        valorTotalPedidos: totalGeralPedidos
      };

      Logger.log(`[Dashboard - _getFinancialSummary] Resumo financeiro: ${JSON.stringify(summary)}`);
      return summary;
    }

    /**
     * Gera sugest√µes de redu√ß√£o de compras usando o Gemini API.
     * @param {string} financialSummaryStr - Resumo financeiro em string JSON.
     * @param {string} topProductsStr - Lista de top produtos em string JSON.
     * @param {string} topSuppliersStr - Lista de top fornecedores em string JSON.
     * @returns {string} Sugest√µes de redu√ß√£o de compras.
     */
    function generatePurchaseSuggestions(financialSummaryStr, topProductsStr, topSuppliersStr) {
      Logger.log('[generatePurchaseSuggestions] Iniciando gera√ß√£o de sugest√µes...');
      Logger.log('financialSummaryStr: ' + financialSummaryStr);
      Logger.log('topProductsStr: ' + topProductsStr);
      Logger.log('topSuppliersStr: ' + topSuppliersStr);
      // Corrige: se algum par√¢metro n√£o vier, substitui por um valor v√°lido
      if (!financialSummaryStr || financialSummaryStr === "undefined") financialSummaryStr = "{}";
      if (!topProductsStr || topProductsStr === "undefined") topProductsStr = "[]";
      if (!topSuppliersStr || topSuppliersStr === "undefined") topSuppliersStr = "[]";

      try {
        const financialSummary = JSON.parse(financialSummaryStr);
        const topProducts = JSON.parse(topProductsStr);
        const topSuppliers = JSON.parse(topSuppliersStr);

        const prompt = `
          **PERSONA:** Voc√™ √© um consultor de supply chain especializado na otimiza√ß√£o de compras de mercadorias.

          **CONTEXTO:** Os dados a seguir s√£o de compras emergenciais ("apaga-inc√™ndio") realizadas em fornecedores locais de alto custo. A empresa deseja criar um plano de a√ß√£o para minimizar a necessidade dessas compras e reduzir a depend√™ncia desses fornecedores.

          **TAREFA:** Com base nos dados, forne√ßa de 3 a 5 recomenda√ß√µes estrat√©gicas e acion√°veis. Organize suas sugest√µes nas seguintes categorias: GEST√ÉO DE ESTOQUE, ESTRAT√âGIA DE FORNECEDORES e AN√ÅLISE DE PRODUTOS. Para cada sugest√£o, seja direto e indique um pr√≥ximo passo pr√°tico.

          **DADOS DE ENTRADA:**
          - Resumo Financeiro das Compras Locais: ${JSON.stringify(financialSummary)}
          - Top 5 Produtos de Compra Urgente: ${JSON.stringify(topProducts.slice(0, 5))}
          - Top 5 Fornecedores Locais Mais Utilizados: ${JSON.stringify(topSuppliers.slice(0, 5))}

          **PLANO DE A√á√ÉO ESTRAT√âGICO:**
          `;

        // Obt√©m a chave da API das propriedades do script
        const apiKey = PropertiesService.getScriptProperties().getProperty('GEMINI_API_KEY');
        
        if (!apiKey) {
            Logger.log('[generatePurchaseSuggestions] Erro: GEMINI_API_KEY n√£o configurada nas Propriedades do Script.');
            return "Erro de configura√ß√£o: Chave da API Gemini n√£o encontrada. Por favor, configure a 'GEMINI_API_KEY' nas Propriedades do Script.";
        }

        const payload = {
          contents: [{ role: "user", parts: [{ text: prompt }] }],
          generationConfig: {
              temperature: 0.7, // Um pouco mais criativo, mas ainda focado
              maxOutputTokens: 500
          }
        };

        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

        Logger.log(`[generatePurchaseSuggestions] Enviando requisi√ß√£o para Gemini API: ${apiUrl}`);
        Logger.log(`[generatePurchaseSuggestions] Payload (antes do fetch): ${JSON.stringify(payload)}`); 

        let response;
        try {
          response = UrlFetchApp.fetch(apiUrl, {
            method: 'POST',
            contentType: 'application/json',
            payload: JSON.stringify(payload),
            muteHttpExceptions: true // Para capturar erros na resposta
          });
        } catch (fetchError) {
          Logger.log(`[generatePurchaseSuggestions] Erro ao executar UrlFetchApp.fetch: ${fetchError.message}. Stack: ${fetchError.stack}`);
          return `Erro de rede ou comunica√ß√£o com a API Gemini: ${fetchError.message}`;
        }

        // Adicionado logs para inspecionar a resposta antes do JSON.parse
        const responseCode = response.getResponseCode();
        const responseText = response.getContentText();
        Logger.log(`[generatePurchaseSuggestions] C√≥digo de Resposta da API: ${responseCode}`); 
        Logger.log(`[generatePurchaseSuggestions] Texto de Resposta da API (bruto): ${responseText}`); 

        // ** Corre√ß√£o principal aqui: Verifica se responseText √© v√°lido antes de tentar JSON.parse **
        if (!responseText || responseText.trim() === '') {
          let errorMessage = `Erro: Resposta vazia ou nula da API Gemini. C√≥digo: ${responseCode}.`;
          Logger.log(`[generatePurchaseSuggestions] Erro detalhado (resposta vazia): ${errorMessage}`);
          return `Erro ao gerar sugest√µes: ${errorMessage}`;
        }

        let result;
        try {
          result = JSON.parse(responseText); // Agora processa responseText ap√≥s a verifica√ß√£o de nulo/vazio
        } catch (parseError) {
          Logger.log(`[generatePurchaseSuggestions] SyntaxError: Erro ao parsear JSON da resposta da API Gemini: ${parseError.message}. Conte√∫do bruto: ${responseText.substring(0, 500)}... Stack: ${parseError.stack}`);
          return `Erro ao gerar sugest√µes: Resposta inv√°lida da API Gemini. Tente novamente ou verifique a chave/permiss√µes.`;
        }
        
        Logger.log(`[generatePurchaseSuggestions] Resposta da API Gemini (parseada): ${JSON.stringify(result)}`);

        if (result.candidates && result.candidates.length > 0 &&
            result.candidates[0].content && result.candidates[0].content.parts &&
            result.candidates[0].content.parts.length > 0) {
          const suggestions = result.candidates[0].content.parts[0].text;
          Logger.log(`[generatePurchaseSuggestions] Sugest√µes geradas: ${suggestions}`);
          return suggestions;
        } else {
          Logger.log(`[generatePurchaseSuggestions] Resposta da API Gemini n√£o cont√©m sugest√µes v√°lidas (candidates ausentes): ${JSON.stringify(result)}`);
          if (result.error && result.error.message) {
            return `Erro da API Gemini: ${result.error.message}`;
          }
          return "N√£o foi poss√≠vel gerar sugest√µes no momento. A API retornou uma estrutura inesperada ou incompleta.";
        }

      } catch (e) {
        Logger.log(`[generatePurchaseSuggestions] Erro fatal (fora do bloco fetch/parse): ${e.message}. Stack: ${e.stack}`);
        return `Ocorreu um erro inesperado ao gerar sugest√µes: ${e.message}`;
      }
    }

    /**
     * Fun√ß√£o principal para o Dashboard, que coleta todos os dados e gera sugest√µes.
     * @returns {Object} Objeto contendo todos os dados do dashboard e sugest√µes.
     */
    function getDashboardData(empresa) {
      // Este novo log confirma que a vers√£o correta do c√≥digo est√° executando.
      Logger.log('--- INICIANDO EXECU√á√ÉO COM O C√ìDIGO CORRIGIDO (v3) ---'); 
      Logger.log(`Filtro recebido para a empresa: ${JSON.stringify(empresa)}`);
      
      try {
        // As chamadas abaixo agora passam o filtro 'empresa'
        const financialSummary = _getFinancialSummary(empresa);
        const topProducts = _getTopProductsByVolume(empresa);
        const topSuppliers = _getTopSuppliersByVolume(empresa);
        
        const suggestions = generatePurchaseSuggestions(
          JSON.stringify(financialSummary || {}),
          JSON.stringify(topProducts || []),
          JSON.stringify(topSuppliers || [])
        );

        Logger.log('--- SUCESSO! Retornando dados J√Å FILTRADOS. ---');
        
        return {
          status: 'success',
          topSuppliers: topSuppliers,
          topProducts: topProducts,
          financialSummary: financialSummary,
          suggestions: suggestions
        };
      } catch (e) {
        Logger.log(`ERRO FATAL: ${e.message}`);
        return { status: 'error', message: `Erro ao carregar dados do Dashboard: ${e.message}` };
      }
    }

    function serializePedidos(pedidos) {
      return pedidos.map(p => {
        const novoPedido = { ...p };
        // Transforma datas em string padronizada
        if (novoPedido.data instanceof Date) {
          novoPedido.data = formatarDataParaISO(novoPedido.data);
        }
        // Se tiver outros campos do tipo Date, fa√ßa igual aqui
        return novoPedido;
      });
    }

    // ===============================================
    // NOVAS FUN√á√ïES PARA RELAT√ìRIOS
    // ===============================================

    /**
     * Retorna uma lista de todos os produtos √∫nicos de todos os pedidos.
     * @returns {Array<string>} Uma lista de nomes de produtos √∫nicos.
     */

    function _getPedidosDatas(reportParams) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
      if (!sheet || sheet.getLastRow() < 2) {
        Logger.log('[_getPedidosData] Planilha "Pedidos" vazia ou n√£o encontrada.');
        return [];
      }
      const dataRange = sheet.getDataRange();
      const values = dataRange.getValues();
      const headers = values[0];
      const pedidos = [];

      for (let i = 1; i < values.length; i++) {
        const row = values[i];
        const pedido = {};
        headers.forEach((header, index) => {
          const camelCaseHeader = toCamelCase(header);
          let value = row[index];
          // Converte string de data para Date
          if (camelCaseHeader === 'data' && typeof value === 'string') {
            try {
              value = new Date(value + 'T12:00:00');
            } catch (e) {
              Logger.log(`Erro ao parsear data ${value} no pedido ${row[0]}: ${e.message}`);
              value = null;
            }
          } else if (value instanceof Date) {
            // ok
          } else if (camelCaseHeader === 'data' && !(value instanceof Date)) {
            value = null;
          }
          pedido[camelCaseHeader] = value;
        });

        // Parse itens JSON caso necess√°rio
        if (typeof pedido.itens === 'string') {
          try {
            pedido.itens = JSON.parse(pedido.itens);
          } catch (e) {
            Logger.log(`[Pedidos] Erro ao parsear itens JSON para pedido ${pedido.numeroDoPedido}: ${e.message}`);
            pedido.itens = [];
          }
        } else if (!Array.isArray(pedido.itens)) {
          pedido.itens = [];
        }

        pedido.totalGeral = parseFloat(pedido.totalGeral || 0);

        pedidos.push(pedido);
      }

      // --- FILTRO MULTI-EMPRESA ---
      if (reportParams && reportParams.empresaCnpj) {
        const idEmpresaFiltro = String(reportParams.companyId).trim();
        Logger.log(`[_getPedidosDatas] Filtrando pedidos pelo ID da empresa: ${idEmpresaFiltro}`);

        const pedidosFiltrados = pedidos.filter(p => {
          // Assumindo que a coluna na sua planilha 'Pedidos' se chama 'Empresa' ou 'ID Empresa'.
          // O toCamelCase vai transformar isso em 'empresa' ou 'idEmpresa'.
          const idDoPedidoNaLinha = String(p.empresa || p.idEmpresa || '').trim();
          
          // Usamos '==' para o caso da planilha ter o n√∫mero 1 e o filtro ser "001"
          return idDoPedidoNaLinha == idEmpresaFiltro;
        });

        Logger.log(`[_getPedidosDatas] Encontrados ${pedidosFiltrados.length} pedidos para a empresa.`);
        return pedidosFiltrados;
      }

      Logger.log('[_getPedidosDatas] Nenhum filtro de empresa aplicado. Retornando todos os pedidos.');
      return pedidos;
    }

    function getUniqueProducts(reportParams) {
      Logger.log('[getUniqueProducts - SERVER] Iniciando busca por produtos √∫nicos.');
      const pedidos = _getPedidosDatas(reportParams); // Reutiliza a fun√ß√£o que busca e formata os dados dos pedidos
      const uniqueProducts = new Set();

      pedidos.forEach(pedido => {
        (pedido.itens || []).forEach(item => {
          if (item.descricao && item.descricao.trim() !== '') {
            uniqueProducts.add(item.descricao.trim());
          }
        });
      });

      const sortedProducts = Array.from(uniqueProducts).sort((a, b) => a.localeCompare(b));
      Logger.log(`[getUniqueProducts - SERVER] Produtos √∫nicos encontrados: ${JSON.stringify(sortedProducts)}`);
      return sortedProducts;
    }

    /**
     * Fun√ß√£o para filtrar pedidos com base em par√¢metros.
     * @param {Array<Object>} allPedidos - Todos os pedidos brutos.
     * @param {Object} reportParams - Par√¢metros de filtro (startDate, endDate, supplier).
     * @returns {Array<Object>} Pedidos filtrados.
     */
    function _filterPedidos(allPedidos, reportParams) {
        let filtered = allPedidos;

        // Adiciona uma verifica√ß√£o expl√≠cita para reportParams aqui
        if (!reportParams || typeof reportParams !== 'object') {
            Logger.log('[_filterPedidos] Aviso: reportParams √© undefined ou n√£o √© um objeto. Nenhum filtro de data/fornecedor ser√° aplicado.');
            return filtered; // Retorna todos os pedidos se n√£o houver par√¢metros v√°lidos
        }

        // Filtro por data
        if (reportParams.startDate && reportParams.endDate) {
            const start = new Date(reportParams.startDate + 'T00:00:00');
            const end = new Date(reportParams.endDate + 'T23:59:59');
            filtered = filtered.filter(pedido => {
                // Se a data do pedido n√£o for um Date object v√°lido, exclua-o ou trate
                if (!(pedido.data instanceof Date)) {
                    Logger.log(`Data inv√°lida no pedido ${pedido.numeroDoPedido}: ${pedido.data}. Excluindo do filtro.`);
                    return false;
                }
                return pedido.data >= start && pedido.data <= end;
            });
            Logger.log(`[_filterPedidos] Filtrado por data: ${filtered.length} pedidos restantes.`);
        }

        // Filtro por fornecedor
        if (reportParams.supplier) {
            const selectedSupplier = reportParams.supplier.toLowerCase();
            filtered = filtered.filter(pedido => (pedido.fornecedor || '').toLowerCase() === selectedSupplier);
            Logger.log(`[_filterPedidos] Filtrado por fornecedor '${reportParams.supplier}': ${filtered.length} pedidos restantes.`);
        }

        return filtered;
    }

    /**
     * Agrupa e sumariza dados de pedidos para gera√ß√£o de relat√≥rio.
     * @param {Array<Object>} pedidos - Pedidos j√° filtrados.
     * @param {Object} reportParams - Par√¢metros do relat√≥rio (reportType).
     * @returns {Object} Dados agrupados e/ou sumarizados.
     */
    function _groupAndSummarizePedidos(pedidos, reportParams) {
        const data = {};

        if (reportParams.reportType === 'detailed') {
            // Relat√≥rio Detalhado: Agrupa por data, depois por fornecedor
            pedidos.sort((a, b) => a.data.getTime() - b.data.getTime()); // Ordena por data

            pedidos.forEach(pedido => {
                const dateStr = Utilities.formatDate(pedido.data, Session.getScriptTimeZone(), 'yyyy-MM-dd');
                if (!data[dateStr]) {
                    data[dateStr] = {
                        date: pedido.data,
                        fornecedores: {},
                        totalDate: 0
                    };
                }
                const fornecedor = pedido.fornecedor || 'Desconhecido';
                if (!data[dateStr].fornecedores[fornecedor]) {
                    data[dateStr].fornecedores[fornecedor] = {
                        pedidos: [],
                        totalFornecedor: 0
                    };
                }
                data[dateStr].fornecedores[fornecedor].pedidos.push(pedido);
                data[dateStr].fornecedores[fornecedor].totalFornecedor += pedido.totalGeral || 0;
                data[dateStr].totalDate += pedido.totalGeral || 0;
            });
        } else if (reportParams.reportType === 'financial') {
            // Relat√≥rio Financeiro: Sumariza totais
            data.totalGeralPedidos = 0;
            data.numeroTotalPedidos = 0;
            data.totalPorFornecedor = {};
            
            pedidos.forEach(pedido => {
                data.totalGeralPedidos += pedido.totalGeral || 0;
                data.numeroTotalPedidos++;
                const fornecedor = pedido.fornecedor || 'Desconhecido';
                data.totalPorFornecedor[fornecedor] = (data.totalPorFornecedor[fornecedor] || 0) + (pedido.totalGeral || 0);
            });
            // Converter para array para facilitar o uso no HTML, se necess√°rio
            data.listaTotalPorFornecedor = Object.keys(data.totalPorFornecedor).map(f => ({
                fornecedor: f,
                total: data.totalPorFornecedor[f]
            })).sort((a, b) => b.total - a.total); // Ordena do maior para o menor
        }
        Logger.log(`[_groupAndSummarizePedidos] Dados agrupados: ${JSON.stringify(data, null, 2)}`);
        return data;
    }


    /**
     * Gera o conte√∫do HTML para o relat√≥rio.
     * @param {Object} reportData - Dados do relat√≥rio (agrupados/sumarizados por _groupAndSummarizePedidos).
     * @param {Object} reportParams - Par√¢metros do relat√≥rio para cabe√ßalho (reportType, startDate, endDate, supplier).
     * @returns {string} Conte√∫do HTML do relat√≥rio.
     */
    function _generatePdfHtmlContent(reportData, reportParams) {
        const companyName = reportParams.companyName || "EMPRESA N√ÉO INFORMADA";
        const companyAddress = reportParams.companyAddress || "";
        const companyCnpj = reportParams.empresaCnpj || "";
        const reportDate = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');

        let reportTitle = "Relat√≥rio de Compras";
        if (reportParams.reportType === 'detailed') {
            reportTitle += " Detalhado";
        } else if (reportParams.reportType === 'financial') {
            reportTitle += " Financeiro";
        }

        let filtersApplied = [];
        if (reportParams.startDate && reportParams.endDate) {
            filtersApplied.push(`Per√≠odo: ${Utilities.formatDate(new Date(reportParams.startDate + 'T00:00:00'), Session.getScriptTimeZone(), 'dd/MM/yyyy')} a ${Utilities.formatDate(new Date(reportParams.endDate + 'T00:00:00'), Session.getScriptTimeZone(), 'dd/MM/yyyy')}`);
        }
        if (reportParams.supplier) {
            filtersApplied.push(`Fornecedor: ${reportParams.supplier}`);
        }
        const filtersHtml = filtersApplied.length > 0 ? `<p class="filters">Filtros Aplicados: ${filtersApplied.join(' | ')}</p>` : '';

        let bodyContent = '';

        if (reportParams.reportType === 'detailed') {
            if (Object.keys(reportData).length === 0) {
                bodyContent += '<p class="no-data">Nenhum pedido encontrado para os filtros selecionados.</p>';
            } else {
                for (const dateStr in reportData) {
                    const dateGroup = reportData[dateStr];
                    bodyContent += `<div class="date-group">`;
                    bodyContent += `<h3>Data: ${Utilities.formatDate(dateGroup.date, Session.getScriptTimeZone(), 'dd/MM/yyyy')} (Total: R$ ${dateGroup.totalDate.toFixed(2).replace('.', ',')})</h3>`;
                    
                    for (const supplierName in dateGroup.fornecedores) {
                        const supplierGroup = dateGroup.fornecedores[supplierName];
                        bodyContent += `<div class="supplier-group">`;
                        bodyContent += `<h4>Fornecedor: ${supplierName} (Total: R$ ${supplierGroup.totalFornecedor.toFixed(2).replace('.', ',')})</h4>`;
                        bodyContent += `<table>`;
                        bodyContent += `<thead><tr>
                            <th>N√∫mero Pedido</th>
                            <th>CNPJ Fornecedor</th>
                            <th>Razao Social</th>
                            <th>Item</th>
                            <th>Unidade</th>
                            <th>Qtd.</th>
                            <th>Pre√ßo Unit.</th>
                            <th>Subtotal Item</th>
                        </tr></thead>`;
                        bodyContent += `<tbody>`;
                        supplierGroup.pedidos.forEach(pedido => {
                            pedido.itens.forEach(item => {
                                bodyContent += `<tr>
                                    <td>${pedido.numeroDoPedido}</td>
                                    <td>${pedido.cnpjFornecedor || ''}</td>
                                    <td>${supplierName}</td>
                                    <td>${item.descricao || ''}</td>
                                    <td>${item.unidade || ''}</td>
                                    <td>${item.quantidade}</td>
                                    <td>R$ ${parseFloat(item.precoUnitario || 0).toFixed(2).replace('.', ',')}</td>
                                    <td>R$ ${parseFloat(item.totalItem || 0).toFixed(2).replace('.', ',')}</td>
                                </tr>`;
                            });
                            // Add a row for total of this specific order
                            bodyContent += `<tr class="pedido-total-row">
                                <td colspan="7" style="text-align:right; font-weight:bold;">Total Pedido ${pedido.numeroDoPedido}:</td>
                                <td style="font-weight:bold;">R$ ${parseFloat(pedido.totalGeral || 0).toFixed(2).replace('.', ',')}</td>
                            </tr>`;
                        });
                        bodyContent += `</tbody>`;
                        bodyContent += `</table>`;
                        bodyContent += `</div>`; // Close supplier-group
                    }
                    bodyContent += `</div>`; // Close date-group
                }
            }
        } else if (reportParams.reportType === 'financial') {
            if (reportData.numeroTotalPedidos === 0) {
                bodyContent += '<p class="no-data">Nenhum dado financeiro encontrado para os filtros selecionados.</p>';
            } else {
                bodyContent += `<p class="financial-summary-total">Total Geral de Pedidos: ${reportData.numeroTotalPedidos}</p>`;
                bodyContent += `<p class="financial-summary-total">Valor Total das Compras: <span class="total-value-display">R$ ${reportData.totalGeralPedidos.toFixed(2).replace('.', ',')}</span></p>`;
                
                bodyContent += `<h4>Totais por Fornecedor:</h4>`;
                bodyContent += `<table>`;
                bodyContent += `<thead><tr><th>Fornecedor</th><th>Valor Total Comprado</th></tr></thead>`;
                bodyContent += `<tbody>`;
                reportData.listaTotalPorFornecedor.forEach(item => {
                    bodyContent += `<tr>
                        <td>${item.fornecedor}</td>
                        <td>R$ ${item.total.toFixed(2).replace('.', ',')}</td>
                    </tr>`;
                });
                bodyContent += `</tbody>`;
                bodyContent += `</table>`;
            }
        }

        // Constr√≥i o HTML completo do relat√≥rio
        const html = `
        <!DOCTYPE html>
        <html>
        <head>
            <title>${reportTitle}</title>
            <style>
                body { font-family: 'Arial', sans-serif; margin: 20px; font-size: 10pt; }
                .header, .footer { text-align: center; margin-bottom: 20px; }
                .header h1 { margin: 0; color: #0056b3; font-size: 16pt; }
                .header p { margin: 2px 0; font-size: 8pt; }
                .report-title { text-align: center; font-size: 14pt; margin-bottom: 15px; color: #007BFF; }
                .filters { font-size: 9pt; text-align: center; margin-bottom: 15px; color: #555; }
                table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 9pt; }
                th { background-color: #f2f2f2; font-weight: bold; text-align: center; }
                .date-group, .supplier-group { margin-bottom: 25px; border: 1px solid #eee; padding: 15px; border-radius: 5px; }
                .date-group h3 { margin-top: 0; color: #0056b3; font-size: 12pt; border-bottom: 1px solid #ccc; padding-bottom: 5px; margin-bottom: 15px; }
                .supplier-group h4 { margin-top: 0; color: #007BFF; font-size: 11pt; margin-bottom: 10px; }
                .no-data { text-align: center; font-style: italic; color: #888; margin-top: 30px; }
                .financial-summary-total { font-size: 12pt; font-weight: bold; text-align: center; margin-bottom: 10px; }
                .total-value-display { color: #28a745; }
                .pedido-total-row { background-color: #f0f8ff; font-style: italic; }
                .pedido-total-row td { border-top: 2px solid #007bff; }
                .page-break { page-break-before: always; } /* Para quebrar p√°gina antes de cada grupo de data/fornecedor se necess√°rio */
            </style>
        </head>
        <body>
            <div class="header">
                <h1>${companyName}</h1>
                <p>${companyAddress}</p>
                <p>CNPJ: ${companyCnpj}</p>
                <p>Relat√≥rio Gerado em: ${reportDate}</p>
            </div>
            <h2 class="report-title">${reportTitle}</h2>
            ${filtersHtml}
            ${bodyContent}
            <div class="footer">
                <p>&copy; ${new Date().getFullYear()} ${companyName}. Todos os direitos reservados.</p>
            </div>
        </body>
        </html>
        `;
        return html;
    }

    /**
     * Gera um relat√≥rio em PDF com base nos par√¢metros fornecidos.
     * @param {Object} reportParams - Objeto com: startDate, endDate, supplier, reportType.
     * @returns {string} URL tempor√°ria do arquivo PDF gerado no Google Drive.
     */
    function generatePdfReport(reportParams) {
      Logger.log(`[generatePdfReport] Iniciando. Par√¢metros recebidos (antes de qualquer processamento): ${JSON.stringify(reportParams)}`);

      // Adiciona uma verifica√ß√£o expl√≠cita para reportParams
      if (reportParams === undefined || reportParams === null) {
          Logger.log('[generatePdfReport] ERRO CR√çTICO: reportParams √© undefined ou null. Abortando.');
          throw new Error('Par√¢metros de relat√≥rio ausentes ou inv√°lidos. Tente novamente.');
      }

      try {
        const allPedidos = _getPedidosDatas(reportParams);
        const filteredPedidos = _filterPedidos(allPedidos, reportParams);
        const reportData = _groupAndSummarizePedidos(filteredPedidos, reportParams);
        const htmlContent = _generatePdfHtmlContent(reportData, reportParams);
        Logger.log(`[generatePdfReport] Conte√∫do HTML gerado (primeiros 500 caracteres): ${htmlContent.substring(0, Math.min(htmlContent.length, 500))}`);


        const htmlBlob = Utilities.newBlob(htmlContent, MimeType.HTML, 'RelatorioTemporario.html');
        Logger.log(`[generatePdfReport] htmlBlob criado. Tipo: ${htmlBlob.getContentType()}, Tamanho: ${htmlBlob.getBytes().length} bytes.`);

        const folderName = "RelatoriosComprasTemporarios";
        let folder;
        const folders = DriveApp.getFoldersByName(folderName);
        if (folders.hasNext()) { 
          folder = folders.next();
          Logger.log(`[generatePdfReport] Pasta existente encontrada: '${folder.getName()}' (ID: ${folder.getId()})`);
        } else {
          folder = DriveApp.createFolder(folderName);
          Logger.log(`[generatePdfReport] Pasta '${folderName}' criada no Google Drive com ID: ${folder.getId()}.`);
        }

        // Verifica se a pasta foi obtida/criada com sucesso antes de prosseguir
        if (!folder) {
            Logger.log('[generatePdfReport] ERRO: A pasta de destino √© nula ou indefinida.');
            throw new Error('N√£o foi poss√≠vel obter ou criar a pasta de destino no Google Drive.');
        }

        const htmlFile = folder.createFile(htmlBlob);
        Logger.log(`[generatePdfReport] Arquivo HTML tempor√°rio criado: ${htmlFile.getUrl()} (ID: ${htmlFile.getId()}).`);

        // Verifica se o arquivo HTML foi criado com sucesso antes de tentar converter para PDF
        if (!htmlFile) {
            Logger.log('[generatePdfReport] ERRO: O arquivo HTML tempor√°rio √© nulo ou indefinido ap√≥s a cria√ß√£o.');
            throw new Error('Falha ao criar o arquivo HTML tempor√°rio.');
        }

        // --- PONTO CR√çTICO: Convers√£o para PDF ---
        Logger.log('[generatePdfReport] Tentando converter o htmlFile para PDF...');
        const pdfBlob = htmlFile.getAs(MimeType.PDF);
        Logger.log(`[generatePdfReport] Convers√£o para PDF conclu√≠da. pdfBlob criado: ${pdfBlob ? 'Sim' : 'N√£o'}. Tamanho: ${pdfBlob ? pdfBlob.getBytes().length : 'N/A'} bytes.`);

        if (!pdfBlob) {
            Logger.log('[generatePdfReport] ERRO L√ìGICO: pdfBlob √© nulo ou indefinido ap√≥s getAs(MimeType.PDF).');
            throw new Error('Falha ao converter o arquivo HTML para PDF: o blob resultante √© nulo.');
        }
        
        let titleForFileName = "RelatorioCompras";
        if (reportParams.reportType === 'detailed') {
            titleForFileName += "_Detalhado";
        } else if (reportParams.reportType === 'financial') {
            titleForFileName += "_Financeiro";
        }
        const pdfFileName = `${titleForFileName}_${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyyMMdd_HHmmss')}.pdf`;
        
        const pdfFile = folder.createFile(pdfBlob).setName(pdfFileName);
        Logger.log(`[generatePdfReport] Arquivo PDF final criado: ${pdfFile.getUrl()} (ID: ${pdfFile.getId()}).`);

        pdfFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
        const fileUrl = pdfFile.getDownloadUrl(); 
        Logger.log(`[generatePdfReport] URL de download do PDF: ${fileUrl}`);
        
        // Opcional: Remover o arquivo HTML tempor√°rio imediatamente ap√≥s a convers√£o
        htmlFile.setTrashed(true); 
        Logger.log(`[generatePdfReport] Arquivo HTML tempor√°rio '${htmlFile.getName()}' movido para a lixeira.`);

        return fileUrl;

      } catch (e) {
        Logger.log(`[generatePdfReport] ERRO DURANTE A GERA√á√ÉO DO PDF: ${e.message}. Stack: ${e.stack}`);
        // Adicione esta linha para relan√ßar um erro mais limpo para o cliente
        throw new Error(`Erro ao gerar relat√≥rio PDF: ${e.message}`);
      }
    }

    /**
     * Gera um relat√≥rio em XLS (planilha) com base nos par√¢metros fornecidos.
     * @param {Object} reportParams - Objeto com par√¢metros do relat√≥rio (startDate, endDate, supplier, reportType).
     * @returns {string} URL tempor√°ria do arquivo XLS gerado no Google Drive.
     */
    function generateXlsReport(reportParams) {
      Logger.log(`[generateXlsReport] Iniciando. Par√¢metros recebidos: ${JSON.stringify(reportParams)}`);

      if (reportParams === undefined || reportParams === null) {
          Logger.log('[generateXlsReport] ERRO CR√çTICO: reportParams √© undefined ou null. Abortando.');
          throw new Error('Par√¢metros de relat√≥rio ausentes ou inv√°lidos para XLS. Tente novamente.');
      }

      try {
        const allPedidos = _getPedidosDatas(reportParams);
        const filteredPedidos = _filterPedidos(allPedidos, reportParams);
        const reportData = _groupAndSummarizePedidos(filteredPedidos, reportParams);

        const ssTitle = `RelatorioCompras_${reportParams.reportType}_${Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'yyyyMMdd_HHmmss')}`;
        const spreadsheet = SpreadsheetApp.create(ssTitle);
        const spreadsheetId = spreadsheet.getId();
        const sheet = spreadsheet.getActiveSheet();
        sheet.setName("Relatorio");

        const reportDate = Utilities.formatDate(new Date(), Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm:ss');
        // Adiciona cabe√ßalho do relat√≥rio na planilha
        const companyName = reportParams.companyName || "EMPRESA N√ÉO INFORMADA";
        const companyAddress = reportParams.companyAddress || "";
        const companyCnpj = reportParams.empresaCnpj || "";
        
        sheet.getRange('A1').setValue(companyName);
        sheet.getRange('A2').setValue(companyAddress);
        sheet.getRange('A3').setValue(`CNPJ: ${companyCnpj}`);
        sheet.getRange('A4').setValue(`Relat√≥rio Gerado em: ${reportDate}`);
        sheet.getRange('A6').setValue(`Relat√≥rio de Compras ${reportParams.reportType === 'detailed' ? 'Detalhado' : 'Financeiro'}`);

        let filtersApplied = [];
        if (reportParams.startDate && reportParams.endDate) {
            filtersApplied.push(`Per√≠odo: ${Utilities.formatDate(new Date(reportParams.startDate + 'T00:00:00'), Session.getScriptTimeZone(), 'dd/MM/yyyy')} a ${Utilities.formatDate(new Date(reportParams.endDate + 'T00:00:00'), Session.getScriptTimeZone(), 'dd/MM/yyyy')}`);
        }
        if (reportParams.supplier) {
            filtersApplied.push(`Fornecedor: ${reportParams.supplier}`);
        }
        if (filtersApplied.length > 0) {
            sheet.getRange('A7').setValue(`Filtros Aplicados: ${filtersApplied.join(' | ')}`);
        }

        let startRow = 9; // Come√ßa a inserir dados a partir da linha 9

        if (reportParams.reportType === 'detailed') {
            const headers = [
                'N√∫mero do Pedido', 'Data do Pedido', 'Fornecedor', 'CNPJ Fornecedor', 'Raz√£o Social',
                'Endere√ßo Fornecedor', 'Condi√ß√£o Pagamento', 'Forma Pagamento', 
                'Placa Ve√≠culo', 'Nome Ve√≠culo', 'Observa√ß√µes',
                'Descri√ß√£o do Item', 'Unidade', 'Quantidade', 'Pre√ßo Unit√°rio', 'Subtotal Item', 'Total Geral do Pedido'
            ];
            sheet.getRange(startRow, 1, 1, headers.length).setValues([headers]).setFontWeight('bold');
            startRow++;

            let rowData = [];
            // Ordenar por data e depois por fornecedor
            const sortedDates = Object.keys(reportData).sort();
            sortedDates.forEach(dateStr => {
                const dateGroup = reportData[dateStr];
                const sortedSupplierNames = Object.keys(dateGroup.fornecedores).sort();
                sortedSupplierNames.forEach(supplierName => {
                    const supplierGroup = dateGroup.fornecedores[supplierName];
                    supplierGroup.pedidos.forEach(pedido => {
                        const pedidoBaseRow = [
                            pedido.numeroDoPedido,
                            pedido.data ? Utilities.formatDate(pedido.data, Session.getScriptTimeZone(), 'yyyy-MM-dd') : '', // Formata a data
                            pedido.fornecedor,
                            pedido.cnpjFornecedor,
                            supplierName,
                            pedido.enderecoFornecedor,
                            pedido.condicaoPagamentoFornecedor,
                            pedido.formaPagamentoFornecedor,
                            pedido.placaVeiculo,
                            pedido.nomeVeiculo,
                            pedido.observacoes,
                            '', '', '', '', '', '' // Colunas vazias para itens
                        ];

                        if (pedido.itens && pedido.itens.length > 0) {
                            pedido.itens.forEach(item => {
                                const itemRow = [
                                    '', '', '', '', '', '', '', '', '', '', // Colunas vazias para dados do pedido
                                    item.descricao || '',
                                    item.unidade || '',
                                    item.quantidade || 0,
                                    parseFloat(item.precoUnitario || 0),
                                    parseFloat(item.totalItem || 0),
                                    '' // Coluna vazia para total geral do pedido
                                ];
                                rowData.push(pedidoBaseRow.slice(0, 11).concat(itemRow.slice(11))); // Combina dados do pedido com item
                            });
                            // Adiciona a linha do total geral do pedido na √∫ltima linha de itens
                            const lastItemRow = rowData[rowData.length - 1];
                            if (lastItemRow) {
                                lastItemRow[headers.length - 1] = parseFloat(pedido.totalGeral || 0); // Define o total geral na √∫ltima coluna do pedido
                            }
                        } else {
                            // Se n√£o houver itens, ainda adiciona a linha do pedido com o total geral
                            const emptyItemRow = ['', '', '', '', '', ''];
                            rowData.push(pedidoBaseRow.slice(0, 11).concat(emptyItemRow));
                            rowData[rowData.length - 1][headers.length - 1] = parseFloat(pedido.totalGeral || 0);
                        }
                    });
                });
            });

            if (rowData.length > 0) {
                sheet.getRange(startRow, 1, rowData.length, headers.length).setValues(rowData);
                // Formatar colunas num√©ricas
                sheet.getRange(startRow, 13, rowData.length, 1).setNumberFormat('0'); // Quantidade
                sheet.getRange(startRow, 14, rowData.length, 1).setNumberFormat('R$#,##0.00'); // Pre√ßo Unit√°rio
                sheet.getRange(startRow, 15, rowData.length, 1).setNumberFormat('R$#,##0.00'); // Subtotal Item
                sheet.getRange(startRow, 16, rowData.length, 1).setNumberFormat('R$#,##0.00'); // Total Geral do Pedido
                Logger.log(`[generateXlsReport] Dados detalhados inseridos na planilha.`);
            } else {
                sheet.getRange(startRow, 1).setValue('Nenhum pedido encontrado para os filtros selecionados.').setFontStyle('italic');
            }
                  // Ajusta as larguras (pode precisar ajustar os √≠ndices se quiser)
                sheet.autoResizeColumns(1, headers.length);
                sheet.setColumnWidth(1, 120); // N√∫mero do Pedido
                sheet.setColumnWidth(2, 90);  // Data
                sheet.setColumnWidth(3, 180); // Fornecedor
                sheet.setColumnWidth(11, 160); // Descri√ß√£o do Item

                // Congela cabe√ßalho da tabela e primeiras colunas
                sheet.setFrozenRows(startRow - 1);
                sheet.setFrozenColumns(2);
        
        // Ajusta larguras
            sheet.autoResizeColumns(1, headers.length);
            sheet.setColumnWidth(1, 120); // N√∫mero do Pedido
            sheet.setColumnWidth(2, 90);  // Data
            sheet.setColumnWidth(3, 180); // Fornecedor
            sheet.setColumnWidth(11, 160); // Descri√ß√£o do Item

            // Congela cabe√ßalho da tabela e primeiras colunas
            sheet.setFrozenRows(startRow - 1);
            sheet.setFrozenColumns(2);

        } else if (reportParams.reportType === 'financial') {
            sheet.getRange(startRow, 1).setValue(`Total Geral de Pedidos: ${reportData.numeroTotalPedidos}`).setFontWeight('bold');
            sheet.getRange(startRow + 1, 1).setValue(`Valor Total das Compras: R$ ${reportData.totalGeralPedidos.toFixed(2).replace('.', ',')}`).setFontWeight('bold');
            sheet.getRange(startRow + 1, 2).setNumberFormat('R$#,##0.00');

            startRow += 3;

            const supplierHeaders = ['Fornecedor', 'Valor Total Comprado'];
            sheet.getRange(startRow, 1, 1, supplierHeaders.length).setValues([supplierHeaders]);
            
            // Formata√ß√£o do cabe√ßalho de fornecedores
            const supHeaderRange = sheet.getRange(startRow, 1, 1, supplierHeaders.length);
            supHeaderRange.setFontWeight('bold')
                          .setFontSize(11)
                          .setBackground('#0056b3')
                          .setFontColor('white')
                          .setHorizontalAlignment('center')
                          .setVerticalAlignment('middle')
                          .setBorder(true, true, true, true, true, true);

            startRow++;

            const supplierData = reportData.listaTotalPorFornecedor.map(item => [
                item.fornecedor,
                item.total
            ]);

            if (supplierData.length > 0) {
                sheet.getRange(startRow, 1, supplierData.length, supplierHeaders.length).setValues(supplierData);
                sheet.getRange(startRow, 2, supplierData.length, 1).setNumberFormat('R$#,##0.00');
                // Formata√ß√£o dos dados
                const supDataRange = sheet.getRange(startRow, 1, supplierData.length, supplierHeaders.length);
                supDataRange.setFontSize(10).setVerticalAlignment('middle');
                supDataRange.setBorder(true, true, true, true, false, false);
            } else {
                sheet.getRange(startRow, 1).setValue('Nenhum dado financeiro por fornecedor encontrado.').setFontStyle('italic');
            }
            sheet.autoResizeColumns(1, supplierHeaders.length);
            sheet.setFrozenRows(startRow - 1);
        }

        // Cria uma pasta tempor√°ria (ou usa uma existente)
        const folderName = "RelatoriosComprasTemporarios";
        let folder;
        const folders = DriveApp.getFoldersByName(folderName);
        if (folders.hasNext()) { 
          folder = folders.next();
          Logger.log(`[generateXlsReport] Pasta existente encontrada: '${folder.getName()}' (ID: ${folder.getId()})`);
        } else {
          folder = DriveApp.createFolder(folderName);
          Logger.log(`[generateXlsReport] Pasta '${folderName}' criada no Google Drive com ID: ${folder.getId()}.`);
        }

        if (!folder) {
            Logger.log('[generateXlsReport] ERRO: A pasta de destino √© nula ou indefinida.');
            throw new Error('N√£o foi poss√≠vel obter ou criar a pasta de destino no Google Drive.');
        }

        Logger.log(`[generateXlsReport] ID da planilha tempor√°ria criada: ${spreadsheetId}`);

        const exportUrl = `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?format=xlsx`;
        Logger.log(`[generateXlsReport] URL de exporta√ß√£o para XLSX: ${exportUrl}`);

        let xlsBlob;
        try {
            // Obtenha o token de acesso para autentica√ß√£o
            const token = ScriptApp.getOAuthToken();
            Logger.log('[generateXlsReport] Token OAuth obtido com sucesso.');

            // Fa√ßa a requisi√ß√£o para exportar o arquivo como XLSX
            const response = UrlFetchApp.fetch(exportUrl, {
                headers: {
                    Authorization: `Bearer ${token}`
                },
                muteHttpExceptions: true // Para capturar erros na resposta
            });

            if (response.getResponseCode() === 200) {
                xlsBlob = response.getBlob();
                Logger.log(`[generateXlsReport] Blob XLS (exportado via URL) criado. Tipo: ${xlsBlob.getContentType()}, Tamanho: ${xlsBlob.getBytes().length} bytes.`);
            } else {
                const errorText = response.getContentText();
                Logger.log(`[generateXlsReport] Erro na resposta da exporta√ß√£o: C√≥digo ${response.getResponseCode()}, Texto: ${errorText}`);
                throw new Error(`Falha ao exportar a planilha para XLSX via URL. C√≥digo: ${response.getResponseCode()}, Mensagem: ${errorText}`);
            }

        } catch (exportError) {
            Logger.log(`[generateXlsReport] Erro durante a exporta√ß√£o via URLFetchApp: ${exportError.message}. Stack: ${exportError.stack}`);
            throw new Error(`Erro ao gerar relat√≥rio XLS (exporta√ß√£o): ${exportError.message}`);
        } finally {
            // Sempre mova a planilha tempor√°ria para a lixeira, independentemente do sucesso da exporta√ß√£o
            if (spreadsheetId) {
                try {
                    DriveApp.getFileById(spreadsheetId).setTrashed(true);
                    Logger.log(`[generateXlsReport] Planilha tempor√°ria '${spreadsheet.getName()}' (ID: ${spreadsheetId}) movida para a lixeira.`);
                } catch (cleanupError) {
                    Logger.log(`[generateXlsReport] Erro ao mover planilha tempor√°ria para a lixeira (ID: ${spreadsheetId}): ${cleanupError.message}`);
                }
            }
        }

        if (!xlsBlob) {
            Logger.log('[generateXlsReport] ERRO L√ìGICO: xlsBlob √© nulo ap√≥s tentativa de exporta√ß√£o via URL.');
            throw new Error('Falha ao gerar relat√≥rio XLS: o blob resultante da exporta√ß√£o √© nulo.');
        }

        const xlsFileName = `${ssTitle}.xlsx`;
        const xlsFile = folder.createFile(xlsBlob).setName(xlsFileName);
        Logger.log(`[generateXlsReport] Arquivo XLS final criado: ${xlsFile.getUrl()} (ID: ${xlsFile.getId()}).`);

        xlsFile.setSharing(DriveApp.Access.ANYONE_WITH_LINK, DriveApp.Permission.VIEW);
        const fileUrl = xlsFile.getDownloadUrl(); 
        Logger.log(`[generateXlsReport] URL de download do XLS: ${fileUrl}`);

        return fileUrl;

      } catch (e) {
        Logger.log(`[generateXlsReport] ERRO DURANTE A GERA√á√ÉO DO XLS: ${e.message}. Stack: ${e.stack}`);
        throw new Error(`Erro ao gerar relat√≥rio XLS: ${e.message}`);
      }
    }

    // ===============================================
    // FUN√á√ïES PARA TROCA DE SENHA 
    // ===============================================
    function listarEmpresas() {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Empresas');
      if (!sheet || sheet.getLastRow() < 2) return [];
      const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 2).getDisplayValues();
      return data.map(([codigo, nome]) => ({ codigo: String(codigo), nome: String(nome) }));
    }

    function getEmpresasDoUsuario(usuarioId) {
      const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      const data = sheet.getDataRange().getValues();
      const header = data[0];
      const idxUsuario = header.indexOf('USUARIO');
      const idxIdEmpresa = header.indexOf('ID EMPRESA');
      const idxNomeEmpresa = header.indexOf('EMPRESA'); // Se voc√™ tiver uma coluna com nome da empresa

      const empresas = [];

      for(let i = 1; i < data.length; i++) {
        if(data[i][idxUsuario] === usuarioId) {
          empresas.push({
            idEmpresa: data[i][idxIdEmpresa],
            nomeEmpresa: data[i][idxNomeEmpresa] || `Empresa ${data[i][idxIdEmpresa]}`
          });
        }
      }
      return empresas;
    }

    // Exemplo para salvar empresa selecionada no usu√°rio_logado
    function registrarEmpresaSelecionadaNoLogin(empresaId) {
      // Voc√™ pode salvar em uma tabela USUARIO_LOGADO ou onde preferir
      // Exemplo simples:
      const sheet = SpreadsheetApp.getActive().getSheetByName('UsuarioLogado');
      sheet.clearContents(); // limpa registros anteriores
      sheet.appendRow([Session.getActiveUser().getEmail(), empresaId, new Date()]);
    }

    /**
     * Altera a senha do usu√°rio logado.
     * @param {string} login - login do usu√°rio (N√ÉO √© e-mail)
     * @param {string} senhaAtual - senha atual digitada
     * @param {string} novaSenha - nova senha digitada
     * @returns {Object} {status: 'success'|'error', message: string}
     */
    function alterarSenhaUsuario(login, senhaAtual, novaSenha) {
      try {
        if (!login) return {status: 'error', message: 'Login n√£o informado.'};
        if (!senhaAtual || !novaSenha) return {status: 'error', message: 'Preencha todos os campos.'};
        
        var sh = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        var dados = sh.getDataRange().getValues();
        var idxLogin = dados[0].indexOf('USUARIO');
        var idxSenha = dados[0].indexOf('SENHA');
        if (idxLogin < 0 || idxSenha < 0)
          return {status: 'error', message: 'Planilha de usu√°rios mal configurada.'};

        var rowIdx = -1;
        for (var i=1; i<dados.length; i++) {
          if (String(dados[i][idxLogin]).toLowerCase().trim() === login.toLowerCase().trim()) {
            rowIdx = i;
            break;
          }
        }
        if (rowIdx < 0) return {status: 'error', message: 'Usu√°rio n√£o encontrado.'};

        // Verificar a senha atual (Aten√ß√£o: simples, para produ√ß√£o use hash)
        var senhaAtualArmazenada = dados[rowIdx][idxSenha];
        var hashInformado = gerarHash(senhaAtual);
        if (senhaAtualArmazenada !== senhaAtual) {
          return {status: 'error', message: 'Senha atual incorreta.'};
        }

        // Atualiza senha com novo hash
        var novoHash = gerarHash(novaSenha);
        sh.getRange(rowIdx+1, idxSenha+1).setValue(novoHash);

        return {status: 'success'};
      } catch (e) {
        return {status: 'error', message: 'Falha ao trocar senha: ' + e.message};
      }
    }

    /**
     * Fun√ß√£o de teste para gerar o hash de uma senha espec√≠fica e exibi-lo no log.
     */
    function testarHashDeSenha() {
      const senhaParaTestar = '1234';
      const hashResultante = gerarHash(senhaParaTestar);

      Logger.log(`O hash SHA-256 para a senha "${senhaParaTestar}" √©:`);
      Logger.log(hashResultante);
    }

    function gerarHash(senha) {
      var digest = Utilities.computeDigest(Utilities.DigestAlgorithm.SHA_256, senha);
      return Utilities.base64Encode(digest);
    }

    function adminRedefinirSenha(usuario, novaSenha) {
      var sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
      var dados = sheet.getDataRange().getValues();
      var idxUsuario = dados[0].indexOf('USUARIO');
      var idxSenha = dados[0].indexOf('SENHA');
      var linha = -1;

      for (var i = 1; i < dados.length; i++) {
        if (String(dados[i][idxUsuario]).toLowerCase().trim() === usuario.toLowerCase().trim()) {
          linha = i;
          break;
        }
      }
      if (linha < 0) return { status: 'error', message: 'Usu√°rio n√£o encontrado.' };

      var hashNovaSenha = gerarHash(novaSenha);
      sheet.getRange(linha + 1, idxSenha + 1).setValue(hashNovaSenha);

      return { status: 'ok', message: 'Senha redefinida com sucesso.' };
    }

    // ===============================================
    // FUN√á√ïES PARA VEICULOS, PLACAS E FORNECEDORES
    // ===============================================
    /**
     * Adiciona um novo nome de ve√≠culo √† planilha "Veiculos".
     * @param {string} nomeVeiculo - O nome do novo ve√≠culo a ser adicionado.
     * @returns {object} Um objeto com o status da opera√ß√£o.
     */
    /**
     * Retorna uma lista de todos os nomes de ve√≠culos cadastrados.
     */
    function getVeiculosList() {
      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
        if (!sheet) {
          Logger.log("Planilha 'Config' n√£o encontrada.");
          return []; 
        }

        const lastRow = sheet.getLastRow();
        if (lastRow < 2) return [];

        // L√™ apenas a primeira coluna (A)
        const data = sheet.getRange(2, 3, sheet.getLastRow() - 1, 1).getValues();
        
        // Mapeia para um array de strings e remove espa√ßos em branco
        const veiculos = data.map(row => String(row[0]).trim()).filter(nome => nome !== "");

        // Ordena alfabeticamente
        veiculos.sort((a, b) => a.localeCompare(b));
        
        return veiculos;
      } catch (e) {
        Logger.log("Erro em getVeiculosList: " + e.message);
        return [];
      }
    }

    /**
     * Adiciona um novo nome de ve√≠culo √† planilha "Veiculos".
     * @param {string} nomeVeiculo - O nome do novo ve√≠culo a ser adicionado.
     * @returns {object} Um objeto com o status da opera√ß√£o.
     */
    function adicionarNovoVeiculo(nomeVeiculo) {
      if (!nomeVeiculo || typeof nomeVeiculo !== 'string' || nomeVeiculo.trim() === '') {
        return { status: 'error', message: 'O nome do ve√≠culo n√£o pode estar vazio.' };
      }

      const nomeLimpo = nomeVeiculo.trim().toUpperCase(); // Padroniza para mai√∫sculas

      try {
        const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Config");
        
        // Pega todos os valores da coluna C para verificar se o ve√≠culo j√° existe
        const rangeVeiculos = sheet.getRange("C2:C" + sheet.getLastRow());
        const veiculosExistentes = rangeVeiculos.getValues().map(row => String(row[0]).trim().toUpperCase());

        // --- L√ìGICA DE VALIDA√á√ÉO INTELIGENTE ---
        const semelhan√ßaMinima = 2; // Aceita at√© 2 letras diferentes. Voc√™ pode ajustar este valor.

        for (const existente of veiculosExistentes) {
          const distancia = levenshteinDistance(nomeLimpo, existente);

          if (distancia === 0) {
            return { status: 'exists', message: 'Este ve√≠culo j√° est√° cadastrado.' };
          }
          
          if (distancia <= semelhan√ßaMinima) {
            return { status: 'similar', message: `Erro: O nome '${nomeVeiculo}' √© muito parecido com '${existente}', que j√° est√° cadastrado.` };
          }
        }
        // --- FIM DA VALIDA√á√ÉO ---   
        
        // Encontra a pr√≥xima linha vazia na coluna C e adiciona o novo ve√≠culo l√°
        const proximaLinhaVazia = rangeVeiculos.getValues().filter(String).length + 2;
        sheet.getRange(proximaLinhaVazia, 3).setValue(nomeLimpo);
        
        return { status: 'ok', message: 'Ve√≠culo adicionado com sucesso!', novoVeiculo: nomeLimpo };
      } catch (e) {
        Logger.log("Erro em adicionarNovoVeiculo: " + e.message);
        return { status: 'error', message: 'Ocorreu um erro ao salvar o novo ve√≠culo.' };
      }
    }

    /**
     * Calcula a Dist√¢ncia de Levenshtein entre duas strings.
     * Retorna o n√∫mero de edi√ß√µes necess√°rias para transformar uma string na outra.
     */
    function levenshteinDistance(a, b) {
      if (a.length === 0) return b.length;
      if (b.length === 0) return a.length;

      const matrix = Array(b.length + 1).fill(null).map(() => Array(a.length + 1).fill(null));

      for (let i = 0; i <= a.length; i++) {
        matrix[0][i] = i;
      }
      for (let j = 0; j <= b.length; j++) {
        matrix[j][0] = j;
      }

      for (let j = 1; j <= b.length; j++) {
        for (let i = 1; i <= a.length; i++) {
          const cost = a[i - 1] === b[j - 1] ? 0 : 1;
          matrix[j][i] = Math.min(
            matrix[j][i - 1] + 1,      // Deletion
            matrix[j - 1][i] + 1,      // Insertion
            matrix[j - 1][i - 1] + cost // Substitution
          );
        }
      }

      return matrix[b.length][a.length];
    }

    // ===============================================
    // FUN√á√ïES PARA GERENCIAMENTO DE USU√ÅRIOS COM AUDITORIA
    // ===============================================

    /**
     * Lista todos os usu√°rios com dados formatados para o frontend
     * @returns {Array<Object>} Lista de usu√°rios com empresas processadas
     */
    function listarUsuariosCompleto() {
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheet || sheet.getLastRow() < 2) return [];

        const data = sheet.getRange(2, 1, sheet.getLastRow() - 1, 8).getValues();
        const sheetEmpresas = SpreadsheetApp.getActive().getSheetByName('Empresas');
        
        // Mapear empresas por ID para convers√£o
        let empresasMap = {};
        if (sheetEmpresas && sheetEmpresas.getLastRow() >= 2) {
          const empresasData = sheetEmpresas.getRange(2, 1, sheetEmpresas.getLastRow() - 1, 2).getValues();
          empresasData.forEach(([id, nome]) => {
            empresasMap[String(id).trim().padStart(3, '0')] = String(nome).trim();
          });
        }

        return data.map(([id, nome, usuario, senha, perfil, status, empresasStr, empresaPadrao]) => {
          const empresasIds = empresasStr ? String(empresasStr).split(',').map(e => e.trim()) : [];
          const empresasNomes = empresasIds.map(id => empresasMap[String(id).padStart(3, '0')] || `Empresa ${id}`);
          const empresaPadraoNome = empresaPadrao ? empresasMap[String(empresaPadrao).padStart(3, '0')] || '' : '';

          return {
            id: String(id),
            nome: String(nome),
            usuario: String(usuario),
            perfil: String(perfil),
            status: String(status),
            empresas: empresasNomes.join(','),
            empresaPadrao: empresaPadraoNome,
            empresasIds: empresasIds,
            empresaPadraoId: empresaPadrao ? String(empresaPadrao) : ''
          };
        });
      } catch (error) {
        Logger.log('Erro em listarUsuariosCompleto: ' + error.message);
        return [];
      }
    }

    /**
     * Obter dados de auditoria de um usu√°rio
     * @param {string} userId - ID do usu√°rio
     * @returns {Object} Dados de auditoria
     */
    function obterDadosAuditoria(userId) {
      try {
        const result = {
          lastLogin: null,
          lastOrder: null,
          lastPrint: null
        };

        // 1. √öltimo login
        const loginSheet = SpreadsheetApp.getActive().getSheetByName('usuario_logado');
        if (loginSheet && loginSheet.getLastRow() > 1) {
          const loginData = loginSheet.getDataRange().getValues();
          const loginEntries = loginData.slice(1).filter(row => String(row[0]).replace("'", "") === String(userId));
          if (loginEntries.length > 0) {
            // Pegar o mais recente
            const lastLoginEntry = loginEntries.sort((a, b) => new Date(b[4]) - new Date(a[4]))[0];
            result.lastLogin = {
              date: lastLoginEntry[4].toISOString(),
              ip: '192.168.1.100' // IP simulado - voc√™ pode implementar captura real
            };
          }
        }

        // 2. √öltimo pedido criado
        const pedidosSheet = SpreadsheetApp.getActive().getSheetByName('Pedidos');
        if (pedidosSheet && pedidosSheet.getLastRow() > 1) {
          const pedidosData = pedidosSheet.getDataRange().getValues();
          const headers = pedidosData[0];
          const numeroIdx = headers.findIndex(h => String(h).toUpperCase().includes('N√öMERO') || String(h).toUpperCase().includes('NUMERO'));
          const dataIdx = headers.findIndex(h => String(h).toUpperCase().includes('DATA'));
          
          if (numeroIdx > -1 && dataIdx > -1) {
            const userPedidos = pedidosData.slice(1).filter(row => {
              // Aqui voc√™ pode ajustar a l√≥gica para identificar pedidos do usu√°rio
              // Por exemplo, se h√° uma coluna "USUARIO_CRIADOR" ou similar
              return true; // Tempor√°rio - implementar l√≥gica espec√≠fica
            });
            
            if (userPedidos.length > 0) {
              const lastPedido = userPedidos.sort((a, b) => new Date(b[dataIdx]) - new Date(a[dataIdx]))[0];
              result.lastOrder = {
                id: String(lastPedido[numeroIdx]),
                date: lastPedido[dataIdx].toISOString()
              };
            }
          }
        }

        // 3. √öltima impress√£o - dados simulados
        // Voc√™ pode implementar um log de impress√µes se necess√°rio
        if (Math.random() > 0.5) { // Simular alguns usu√°rios com impress√µes
          result.lastPrint = {
            id: 'PC-2025-0789',
            date: new Date(Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000).toISOString()
          };
        }

        return result;
      } catch (error) {
        Logger.log('Erro em obterDadosAuditoria: ' + error.message);
        return { lastLogin: null, lastOrder: null, lastPrint: null };
      }
    }

    /**
     * Alternar status de usu√°rio (Ativo/Inativo)
     * @param {string} userId - ID do usu√°rio
     * @returns {Object} Resultado da opera√ß√£o
     */
    function alternarStatusUsuario(userId) {
      try {
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheet) return { status: 'error', message: 'Planilha Usuarios n√£o encontrada' };

        const data = sheet.getDataRange().getValues();
        const headers = data[0];
        const idIdx = headers.findIndex(h => String(h).toUpperCase() === 'ID');
        const statusIdx = headers.findIndex(h => String(h).toUpperCase() === 'STATUS');
        const nomeIdx = headers.findIndex(h => String(h).toUpperCase() === 'NOME');

        if (idIdx === -1 || statusIdx === -1) {
          return { status: 'error', message: 'Colunas ID ou STATUS n√£o encontradas' };
        }

        for (let i = 1; i < data.length; i++) {
          if (String(data[i][idIdx]) === String(userId)) {
            const statusAtual = String(data[i][statusIdx]);
            const novoStatus = statusAtual === 'Ativo' ? 'Inativo' : 'Ativo';
            const nomeUsuario = String(data[i][nomeIdx]);
            
            sheet.getRange(i + 1, statusIdx + 1).setValue(novoStatus);
            
            return { 
              status: 'ok', 
              message: `Usu√°rio ${nomeUsuario} foi ${novoStatus === 'Ativo' ? 'ativado' : 'desativado'}`,
              novoStatus: novoStatus,
              nomeUsuario: nomeUsuario
            };
          }
        }

        return { status: 'error', message: 'Usu√°rio n√£o encontrado' };
      } catch (error) {
        Logger.log('Erro em alternarStatusUsuario: ' + error.message);
        return { status: 'error', message: 'Erro interno: ' + error.message };
      }
    }

    /**
     * Salvar permiss√µes de empresa para usu√°rio (vers√£o completa)
     * @param {string} userId - ID do usu√°rio
     * @param {Array} empresasIds - Array de IDs das empresas
     * @param {string} empresaPadraoId - ID da empresa padr√£o
     * @returns {Object} Resultado da opera√ß√£o
     */
    function salvarPermissoesEmpresaUsuario(userId, empresasIds, empresaPadraoId) {
      try {
        Logger.log(`[salvarPermissoesEmpresaUsuario] Iniciando para usu√°rio ${userId}`);
        Logger.log(`[salvarPermissoesEmpresaUsuario] Empresas: ${JSON.stringify(empresasIds)}`);
        Logger.log(`[salvarPermissoesEmpresaUsuario] Empresa padr√£o: ${empresaPadraoId}`);
        
        const sheet = SpreadsheetApp.getActive().getSheetByName('Usuarios');
        if (!sheet) return { status: 'error', message: 'Planilha Usuarios n√£o encontrada' };

        const data = sheet.getDataRange().getValues();
        const headers = data[0];
        const idIdx = headers.findIndex(h => String(h).toUpperCase() === 'ID');
        const empresasIdx = headers.findIndex(h => String(h).toUpperCase().includes('EMPRESA') && !String(h).toUpperCase().includes('PADR√ÉO'));
        const empresaPadraoIdx = headers.findIndex(h => String(h).toUpperCase().includes('EMPRESA') && String(h).toUpperCase().includes('PADR√ÉO'));
        const nomeIdx = headers.findIndex(h => String(h).toUpperCase() === 'NOME');

        Logger.log(`[salvarPermissoesEmpresaUsuario] √çndices - ID: ${idIdx}, Empresas: ${empresasIdx}, Padr√£o: ${empresaPadraoIdx}`);

        if (idIdx === -1 || empresasIdx === -1) {
          return { status: 'error', message: 'Colunas necess√°rias n√£o encontradas' };
        }

        for (let i = 1; i < data.length; i++) {
          if (String(data[i][idIdx]) === String(userId)) {
            const empresasStr = Array.isArray(empresasIds) ? empresasIds.join(',') : '';
            const nomeUsuario = String(data[i][nomeIdx]);
            
            // Salva lista de empresas
            sheet.getRange(i + 1, empresasIdx + 1).setValue(empresasStr);
            
            // Salva empresa padr√£o se a coluna existir e a empresa padr√£o estiver na lista
            if (empresaPadraoIdx > -1) {
              const empresaPadraoValida = empresaPadraoId && empresasIds.includes(empresaPadraoId) ? empresaPadraoId : '';
              sheet.getRange(i + 1, empresaPadraoIdx + 1).setValue(empresaPadraoValida);
            }
            
            Logger.log(`[salvarPermissoesEmpresaUsuario] Permiss√µes salvas para usu√°rio ${nomeUsuario}`);
            
            return { 
              status: 'ok', 
              message: `Permiss√µes de empresas atualizadas para ${nomeUsuario}`,
              empresas: empresasStr,
              empresaPadrao: empresaPadraoId
            };
          }
        }

        return { status: 'error', message: 'Usu√°rio n√£o encontrado' };
      } catch (error) {
        Logger.log('Erro em salvarPermissoesEmpresaUsuario: ' + error.message);
        return { status: 'error', message: 'Erro interno: ' + error.message };
      }
    }

    // ===============================================
    // FUN√á√ïES PARA RASCUNHO
    // ===============================================

    /**
     * Fun√ß√£o de teste para verificar comunica√ß√£o backend
     */
    function testarComunicacao() {
      console.log('‚úÖ [TESTE] Fun√ß√£o testarComunicacao chamada com sucesso');
      return {
        status: 'success',
        message: 'Comunica√ß√£o funcionando',
        timestamp: new Date().toISOString()
      };
    }

    /**
     * Fun√ß√£o de teste ainda mais simples
     */
    function testeSimples() {
      return 'OK';
    }

    /**
     * ===============================================
     * BACKEND - SISTEMA DE RASCUNHOS
     * Google Apps Script Functions
     * ===============================================
     */

    /**
     * Salva um rascunho na planilha
     * @param {Object} dadosRascunho - Dados do rascunho a ser salvo
     * @returns {Object} - Resposta com status e ID do rascunho
     */
    function salvarRascunho(dadosRascunho) {
      try {
        console.log('üìù Salvando rascunho:', dadosRascunho);
        
        // Valida√ß√µes b√°sicas
        if (!dadosRascunho.fornecedor || !dadosRascunho.fornecedor.trim()) {
          return {
            status: 'error',
            message: 'Fornecedor √© obrigat√≥rio para salvar o rascunho.'
          };
        }
        
        if (!dadosRascunho.itens || !Array.isArray(dadosRascunho.itens) || dadosRascunho.itens.length === 0) {
          return {
            status: 'error',
            message: 'Pelo menos um item √© obrigat√≥rio para salvar o rascunho.'
          };
        }
        
        // Validar se pelo menos um item tem descri√ß√£o
        const itemValido = dadosRascunho.itens.some(item => item.descricao && item.descricao.trim());
        if (!itemValido) {
          return {
            status: 'error',
            message: 'Pelo menos um item deve ter uma descri√ß√£o.'
          };
        }
        
        // Obter a planilha
        const planilha = SpreadsheetApp.openById(PLANILHA_ID);
        const aba = planilha.getSheetByName('Pedidos') || planilha.insertSheet('Pedidos');
        
        // Gerar ID √∫nico para o rascunho
        const agora = new Date();
        const ano = agora.getFullYear();
        const mes = String(agora.getMonth() + 1).padStart(2, '0');
        const dia = String(agora.getDate()).padStart(2, '0');
        const timestamp = agora.getTime();
        const rascunhoId = `RASC-${ano}${mes}${dia}-${timestamp}`;
        
        // Obter dados do fornecedor da aba Fornecedores (se existir)
        const fornecedoresSheet = planilha.getSheetByName('Fornecedores');
        let fornecedorCnpj = '';
        let fornecedorEndereco = '';
        let condicaoPagamentoFornecedor = '';
        let formaPagamentoFornecedor = '';
        let estadoFornecedor = '';

        if (fornecedoresSheet) {
          const fornecedoresData = fornecedoresSheet.getRange(2, 1, fornecedoresSheet.getLastRow() - 1, fornecedoresSheet.getLastColumn()).getValues();
          const foundFornecedor = fornecedoresData.find(row => String(row[1]) === dadosRascunho.fornecedor); 
          if (foundFornecedor) {
            fornecedorCnpj = String(foundFornecedor[3] || '');
            fornecedorEndereco = String(foundFornecedor[4] || '');
            condicaoPagamentoFornecedor = String(foundFornecedor[5] || '');
            formaPagamentoFornecedor = String(foundFornecedor[6] || '');
            estadoFornecedor = String(foundFornecedor[10] || ''); // Coluna 11 (√≠ndice 10) = Estado
          }
        }

        // Preparar dados para salvar (mesma estrutura do salvarPedido)
        const dadosParaSalvar = {
          'N√∫mero do Pedido': "'" + rascunhoId, // Usando ID do rascunho como n√∫mero
          'Empresa': "'" + (dadosRascunho.empresa || Session.getActiveUser().getEmail()),
          'Data': dadosRascunho.data ? formatarDataParaISO(dadosRascunho.data) : formatarDataParaISO(agora),
          'Fornecedor': dadosRascunho.fornecedor.trim(),
          'CNPJ Fornecedor': fornecedorCnpj,
          'Endere√ßo Fornecedor': fornecedorEndereco,
          'Estado Fornecedor': estadoFornecedor,
          'Condi√ß√£o Pagamento Fornecedor': condicaoPagamentoFornecedor,
          'Forma Pagamento Fornecedor': formaPagamentoFornecedor,
          'Placa Veiculo': dadosRascunho.placaVeiculo || '',
          'Nome Veiculo': dadosRascunho.nomeVeiculo || '',
          'Observacoes': dadosRascunho.observacoes || '',
          'Total Geral': dadosRascunho.totalGeral || 0,
          'Status': 'RASCUNHO', // Diferen√ßa principal: status RASCUNHO em vez de "Em Aberto"
          'Itens': JSON.stringify(dadosRascunho.itens),
          'Data Ultima Edicao': formatarDataParaISO(agora) // Sempre usar data/hora atual padronizada
        };
        
        // Verificar se √© uma atualiza√ß√£o de rascunho existente
        if (dadosRascunho.rascunhoId) {
          const linhaExistente = encontrarLinhaRascunho(aba, dadosRascunho.rascunhoId);
          if (linhaExistente > 0) {
            // Atualizar rascunho existente usando a mesma estrutura
            dadosParaSalvar['N√∫mero do Pedido'] = "'" + dadosRascunho.rascunhoId;
            salvarDadosNaPlanilha(aba, dadosParaSalvar, linhaExistente);
            
            console.log('‚úÖ Rascunho atualizado com sucesso:', dadosRascunho.rascunhoId);
            return {
              status: 'success',
              message: 'Rascunho atualizado com sucesso!',
              rascunhoId: dadosRascunho.rascunhoId
            };
          }
        }
        
        // Salvar novo rascunho usando a mesma estrutura da fun√ß√£o salvarPedido
        salvarDadosNaPlanilha(aba, dadosParaSalvar);
        
        console.log('‚úÖ Rascunho salvo com sucesso:', rascunhoId);
        return {
          status: 'success',
          message: 'Rascunho salvo com sucesso!',
          rascunhoId: rascunhoId
        };
        
      } catch (error) {
        console.error('‚ùå Erro ao salvar rascunho:', error);
        return {
          status: 'error',
          message: 'Erro interno ao salvar rascunho: ' + error.message
        };
      }
    }

    /**
     * Busca todos os rascunhos de uma empresa
     * @param {string} empresaId - ID da empresa
     * @returns {Object} - Lista de rascunhos
     */
    function buscarRascunhos(empresaId) {
      console.log('üîç [BACKEND] === IN√çCIO buscarRascunhos ===');
      console.log('üîç [BACKEND] Par√¢metro empresaId:', empresaId);
      console.log('üîç [BACKEND] Tipo do empresaId:', typeof empresaId);
      
      try {
        // ID da planilha definido localmente
        var planilhaId = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';
        
        // Valida√ß√£o b√°sica
        if (!empresaId) {
          console.error('‚ùå [BACKEND] empresaId √© obrigat√≥rio');
          var erro = {
            status: 'error',
            message: 'ID da empresa √© obrigat√≥rio',
            rascunhos: []
          };
          console.log('üì§ [BACKEND] Retornando erro de valida√ß√£o:', erro);
          return erro;
        }
        
        console.log('‚úÖ [BACKEND] Valida√ß√£o OK, tentando acessar planilha...');
        console.log('üîç [BACKEND] planilhaId:', planilhaId);
        
        var planilha = SpreadsheetApp.openById(planilhaId);
        console.log('‚úÖ [BACKEND] Planilha acessada com sucesso');
        
        var aba = planilha.getSheetByName('Pedidos');
        
        if (!aba) {
          console.log('üìã [BACKEND] Aba Pedidos n√£o encontrada');
          var sucesso = {
            status: 'success',
            rascunhos: [],
            message: 'Aba Pedidos n√£o encontrada'
          };
          console.log('üì§ [BACKEND] Retornando lista vazia:', sucesso);
          return sucesso;
        }
        
        console.log('‚úÖ [BACKEND] Aba Pedidos encontrada');
        
        var dados = aba.getDataRange().getValues();
        console.log('üìä [BACKEND] Dados obtidos - Total de linhas:', dados.length);
        
        if (dados.length < 2) {
          console.log('üìã [BACKEND] Planilha vazia ou s√≥ cabe√ßalho');
          var vazio = {
            status: 'success',
            rascunhos: [],
            message: 'Planilha vazia'
          };
          console.log('üì§ [BACKEND] Retornando planilha vazia:', vazio);
          return vazio;
        }
        
        var cabecalhos = dados[0];
        var rascunhos = [];
        
        console.log('üìä [BACKEND] Cabe√ßalhos:', cabecalhos);
        
        // Encontrar √≠ndices das colunas (usando os nomes reais da planilha)
        var indices = {
          numeroPedido: cabecalhos.indexOf('N√∫mero do Pedido'),
          empresa: cabecalhos.indexOf('Empresa'),
          status: cabecalhos.indexOf('Status'),
          data: cabecalhos.indexOf('Data'),
          fornecedor: cabecalhos.indexOf('Fornecedor'),
          nomeVeiculo: cabecalhos.indexOf('Nome Veiculo'),
          placaVeiculo: cabecalhos.indexOf('Placa Veiculo'),
          observacoes: cabecalhos.indexOf('Observacoes'),
          itens: cabecalhos.indexOf('Itens'),
          totalGeral: cabecalhos.indexOf('Total Geral')
        };
        
        console.log('üìä [BACKEND] √çndices encontrados:', indices);
        
        // Verificar colunas cr√≠ticas
        if (indices.status === -1) {
          console.error('‚ùå [BACKEND] Coluna Status n√£o encontrada');
          var erro = {
            status: 'error',
            message: 'Coluna Status n√£o encontrada na planilha',
            rascunhos: []
          };
          console.log('üì§ [BACKEND] Retornando erro de estrutura:', erro);
          return erro;
        }
        
        if (indices.empresa === -1) {
          console.error('‚ùå [BACKEND] Coluna Empresa n√£o encontrada');
          var erro = {
            status: 'error',
            message: 'Coluna Empresa n√£o encontrada na planilha',
            rascunhos: []
          };
          console.log('üì§ [BACKEND] Retornando erro de estrutura:', erro);
          return erro;
        }
        
        console.log('‚úÖ [BACKEND] Estrutura da planilha validada');
        
        // Processar dados
        var rascunhosEncontrados = 0;
        var empresaIdStr = String(empresaId).trim();
        
        console.log('üîç [BACKEND] Processando linhas para empresa:', empresaIdStr);
        
        for (var i = 1; i < dados.length; i++) {
          var linha = dados[i];
          var statusLinha = linha[indices.status];
          var empresaLinha = linha[indices.empresa];
          
          // Debug das primeiras 3 linhas
          if (i <= 3) {
            console.log('üìä [BACKEND] Linha ' + i + ': Status="' + statusLinha + '", Empresa="' + empresaLinha + '"');
          }
          
          // Verificar se √© rascunho da empresa
          if (statusLinha === 'RASCUNHO' && empresaLinha) {
            // Remover ap√≥strofo do campo empresa para compara√ß√£o
            var empresaNaPlanilha = String(empresaLinha).replace(/'/g, '').trim();
            
            if (i <= 3) {
              console.log('üîç [BACKEND] Comparando linha ' + i + ': "' + empresaNaPlanilha + '" === "' + empresaIdStr + '"');
            }
            
            if (empresaNaPlanilha === empresaIdStr) {
              rascunhosEncontrados++;
              console.log('‚úÖ [BACKEND] Rascunho ' + rascunhosEncontrados + ' encontrado na linha ' + (i + 1));
              
              var itensArray = [];
              try {
                if (linha[indices.itens]) {
                  itensArray = JSON.parse(linha[indices.itens]);
                }
              } catch (e) {
                console.warn('‚ö†Ô∏è [BACKEND] Erro ao parsear itens:', linha[indices.numeroPedido]);
                itensArray = [];
              }
              
              var rascunho = {
                id: linha[indices.numeroPedido] ? String(linha[indices.numeroPedido]).replace(/'/g, '') : '',
                data: linha[indices.data] ? String(linha[indices.data]) : '',
                fornecedor: linha[indices.fornecedor] || '',
                nomeVeiculo: linha[indices.nomeVeiculo] || '',
                placaVeiculo: linha[indices.placaVeiculo] || '',
                observacoes: linha[indices.observacoes] || '',
                itens: itensArray,
                totalGeral: Number(linha[indices.totalGeral]) || 0
              };
              
              rascunhos.push(rascunho);
            }
          }
        }
        
        console.log(`‚úÖ [BACKEND] Processamento conclu√≠do - ${rascunhos.length} rascunhos encontrados`);
        
        // Ordenar por data (mais recente primeiro)
        try {
          rascunhos.sort((a, b) => new Date(b.data) - new Date(a.data));
          console.log('‚úÖ [BACKEND] Rascunhos ordenados por data');
        } catch (sortError) {
          console.warn('‚ö†Ô∏è [BACKEND] Erro ao ordenar:', sortError);
        }
        
        const resultado = {
          status: 'success',
          rascunhos: rascunhos,
          message: `${rascunhos.length} rascunho(s) encontrado(s)`
        };
        
        console.log('üì§ [BACKEND] Retornando resultado final:', resultado);
        return resultado;
        
      } catch (error) {
        console.error('‚ùå [BACKEND] Erro na fun√ß√£o buscarRascunhos:', error);
        console.error('‚ùå [BACKEND] Stack trace:', error.stack);
        
        const erro = {
          status: 'error',
          message: 'Erro interno: ' + error.message,
          rascunhos: []
        };
        
        console.log('üì§ [BACKEND] Retornando erro:', erro);
        return erro;
      } finally {
        console.log('üîç [BACKEND] === FIM buscarRascunhos ===');
      }
    }

    /**
     * Busca um rascunho espec√≠fico por ID
     * @param {string} rascunhoId - ID do rascunho
     * @returns {Object} - Dados do rascunho
     */
    function buscarRascunhoPorId(rascunhoId) {
      try {
        console.log('üîç [BUSCAR ID] Buscando rascunho por ID:', rascunhoId);
        
        // ID da planilha definido localmente
        var planilhaId = '1J7CE_BZ8eUsXhjkmgxAIIWjMTOr2FfSfIMONqE4UpHA';
        var planilha = SpreadsheetApp.openById(planilhaId);
        var aba = planilha.getSheetByName('Pedidos');
        
        if (!aba) {
          return {
            status: 'error',
            message: 'Planilha de pedidos n√£o encontrada.'
          };
        }
        
        var dados = aba.getDataRange().getValues();
        var cabecalhos = dados[0];
        
        // Buscar poss√≠veis varia√ß√µes do nome da coluna de data √∫ltima edi√ß√£o
        var possiveisNomes = ['Data Ultima Edicao', 'Data √öltima Edi√ß√£o', 'Ultima Edicao', '√öltima Edi√ß√£o', 'Data da Ultima Edicao'];
        var indiceDataUltimaEdicao = -1;
        
        for (var nomeColuna of possiveisNomes) {
          var indice = cabecalhos.indexOf(nomeColuna);
          if (indice !== -1) {
            indiceDataUltimaEdicao = indice;
            console.log('üîç [BUSCAR ID] ‚úÖ Coluna encontrada:', nomeColuna, 'no √≠ndice:', indice);
            break;
          }
        }
        
        // Encontrar √≠ndices das colunas (usando os nomes reais da planilha)
        var indices = {
          numeroPedido: cabecalhos.indexOf('N√∫mero do Pedido'),
          status: cabecalhos.indexOf('Status'),
          data: cabecalhos.indexOf('Data'),
          empresa: cabecalhos.indexOf('Empresa'),
          fornecedor: cabecalhos.indexOf('Fornecedor'),
          nomeVeiculo: cabecalhos.indexOf('Nome Veiculo'),
          placaVeiculo: cabecalhos.indexOf('Placa Veiculo'),
          observacoes: cabecalhos.indexOf('Observacoes'),
          itens: cabecalhos.indexOf('Itens'),
          totalGeral: cabecalhos.indexOf('Total Geral'),
          dataUltimaEdicao: indiceDataUltimaEdicao
        };
        
        console.log('üîç [BUSCAR ID] Processando ' + (dados.length - 1) + ' linhas...');
        
        // Procurar o rascunho
        for (var i = 1; i < dados.length; i++) {
          var linha = dados[i];
          
          var numeroRascunho = linha[indices.numeroPedido] ? String(linha[indices.numeroPedido]).replace(/'/g, '') : '';
          if (numeroRascunho === rascunhoId && linha[indices.status] === 'RASCUNHO') {
            var itensArray = [];
            try {
              if (linha[indices.itens]) {
                itensArray = JSON.parse(linha[indices.itens]);
              }
            } catch (e) {
              console.warn('‚ö†Ô∏è [BUSCAR ID] Erro ao parsear itens do rascunho:', rascunhoId);
              itensArray = [];
            }
            
            var rascunho = {
              id: numeroRascunho,
              data: linha[indices.data] ? String(linha[indices.data]) : '',
              empresa: linha[indices.empresa] ? String(linha[indices.empresa]).replace(/'/g, '') : '',
              fornecedor: linha[indices.fornecedor] || '',
              nomeVeiculo: linha[indices.nomeVeiculo] || '',
              placaVeiculo: linha[indices.placaVeiculo] || '',
              observacoes: linha[indices.observacoes] || '',
              itens: itensArray,
              totalGeral: Number(linha[indices.totalGeral]) || 0,
              dataUltimaEdicao: (indices.dataUltimaEdicao !== -1 && linha[indices.dataUltimaEdicao]) ? String(linha[indices.dataUltimaEdicao]) : ''
            };
            
            console.log('‚úÖ [BUSCAR ID] Rascunho encontrado:', rascunhoId);
            return {
              status: 'success',
              rascunho: rascunho
            };
          }
        }
        
        console.log('‚ùå [BUSCAR ID] Rascunho n√£o encontrado:', rascunhoId);
        return {
          status: 'error',
          message: 'Rascunho n√£o encontrado.'
        };
        
      } catch (error) {
        console.error('‚ùå [BUSCAR ID] Erro ao buscar rascunho por ID:', error);
        return {
          status: 'error',
          message: 'Erro ao buscar rascunho: ' + error.message
        };
      }
    }

    /**
     * Finaliza um rascunho como pedido oficial
     * @param {string} rascunhoId - ID do rascunho
     * @returns {Object} - Resultado da opera√ß√£o
     */
    function finalizarRascunho(rascunhoId) {
      try {
        console.log('‚úÖ Finalizando rascunho:', rascunhoId);
        
        // Buscar dados do rascunho
        const resultadoBusca = buscarRascunhoPorId(rascunhoId);
        if (resultadoBusca.status !== 'success') {
          return resultadoBusca;
        }
        
        const dadosRascunho = resultadoBusca.rascunho;
        console.log('üìã Dados do rascunho encontrado:', dadosRascunho);
        
        // Validar dados para finaliza√ß√£o
        const validacao = validarDadosParaPedido(dadosRascunho);
        if (!validacao.valido) {
          return {
            status: 'error',
            message: validacao.mensagem
          };
        }
        
        // Obter empresa do rascunho ou usar empresa do usu√°rio logado
        let empresaCodigo = dadosRascunho.empresa;
        
        // Se n√£o houver empresa no rascunho, tentar obter do usu√°rio logado
        if (!empresaCodigo) {
          const usuarioLogado = obterUsuarioLogado();
          if (usuarioLogado && usuarioLogado.idEmpresa) {
            empresaCodigo = usuarioLogado.idEmpresa;
          } else {
            return {
              status: 'error',
              message: 'N√£o foi poss√≠vel determinar a empresa para gerar o n√∫mero do pedido.'
            };
          }
        }
        
        console.log('üè¢ Empresa para gera√ß√£o do pedido:', empresaCodigo);
        
        // Gerar n√∫mero do pedido sequencial por empresa
        const numeroPedido = getProximoNumeroPedido(empresaCodigo);
        console.log('üìù N√∫mero do pedido gerado:', numeroPedido);
        
        // Preparar dados do pedido
        const dadosPedido = {
          numero: numeroPedido,
          data: formatarDataParaISO(dadosRascunho.data || new Date()),
          fornecedor: dadosRascunho.fornecedor,
          nomeVeiculo: dadosRascunho.nomeVeiculo || '',
          placaVeiculo: dadosRascunho.placaVeiculo || '',
          observacoes: dadosRascunho.observacoes || '',
          itens: dadosRascunho.itens || [],
          totalGeral: dadosRascunho.totalGeral || 0,
          empresa: empresaCodigo
        };
        
        console.log('üì¶ Dados do pedido preparados:', dadosPedido);
        
        // Salvar como pedido usando fun√ß√£o existente
        const resultadoSalvamento = salvarPedido(dadosPedido);
        
        if (resultadoSalvamento.status === 'ok') {
          // Excluir o rascunho
          const resultadoExclusao = excluirRascunho(rascunhoId);
          
          console.log('‚úÖ Rascunho finalizado como pedido:', numeroPedido);
          return {
            status: 'success',
            message: 'Rascunho finalizado com sucesso!',
            numeroPedido: numeroPedido
          };
        } else {
          return {
            status: 'error',
            message: 'Erro ao finalizar rascunho: ' + resultadoSalvamento.message
          };
        }
        
      } catch (error) {
        console.error('‚ùå Erro ao finalizar rascunho:', error);
        return {
          status: 'error',
          message: 'Erro interno ao finalizar rascunho: ' + error.message
        };
      }
    }

    /**
     * Exclui um rascunho
     * @param {string} rascunhoId - ID do rascunho
     * @returns {Object} - Resultado da opera√ß√£o
     */
    function excluirRascunho(rascunhoId) {
      try {
        console.log('üóëÔ∏è Excluindo rascunho:', rascunhoId);
        
        const planilha = SpreadsheetApp.openById(PLANILHA_ID);
        const aba = planilha.getSheetByName('Pedidos');
        
        if (!aba) {
          return {
            status: 'error',
            message: 'Planilha de pedidos n√£o encontrada.'
          };
        }
        
        const linhaRascunho = encontrarLinhaRascunho(aba, rascunhoId);
        
        if (linhaRascunho > 0) {
          aba.deleteRow(linhaRascunho);
          
          console.log('‚úÖ Rascunho exclu√≠do:', rascunhoId);
          return {
            status: 'success',
            message: 'Rascunho exclu√≠do com sucesso!'
          };
        } else {
          return {
            status: 'error',
            message: 'Rascunho n√£o encontrado.'
          };
        }
        
      } catch (error) {
        console.error('‚ùå Erro ao excluir rascunho:', error);
        return {
          status: 'error',
          message: 'Erro ao excluir rascunho: ' + error.message
        };
      }
    }

    /**
     * ===============================================
     * FUN√á√ïES DE DIAGN√ìSTICO
     * ===============================================
     */

    /**
     * FUN√á√ÉO DE DIAGN√ìSTICO COMPLETO PARA VERIFICAR ESTRUTURA DAS PLANILHAS
     * Execute esta fun√ß√£o no Google Apps Script para verificar se tudo est√° correto
     */
    function diagnosticoCompleto() {
      console.log('üîç === DIAGN√ìSTICO COMPLETO DO SISTEMA ===');
      
      try {
        const planilha = SpreadsheetApp.openById(PLANILHA_ID);
        console.log('‚úÖ Planilha acessada:', planilha.getName());
        
        // 1. Verificar aba Fornecedores
        console.log('\nüìã === ABA FORNECEDORES ===');
        const abaFornecedores = planilha.getSheetByName('Fornecedores');
        if (abaFornecedores) {
          const headersFornecedores = abaFornecedores.getRange(1, 1, 1, abaFornecedores.getLastColumn()).getValues()[0];
          console.log('üìä Colunas encontradas na aba Fornecedores:', headersFornecedores.length);
          headersFornecedores.forEach((header, index) => {
            console.log(`   Coluna ${index + 1}: "${header}"`);
          });
          
          // Verificar se h√° fornecedores com estado preenchido
          const dadosFornecedores = abaFornecedores.getRange(2, 1, Math.min(3, abaFornecedores.getLastRow() - 1), abaFornecedores.getLastColumn()).getValues();
          console.log('\nüîç Primeiros fornecedores (amostra):');
          dadosFornecedores.forEach((fornecedor, index) => {
            console.log(`   Fornecedor ${index + 1}:`);
            console.log(`     - Raz√£o Social: "${fornecedor[1]}"`);
            console.log(`     - Estado (Coluna 11): "${fornecedor[10]}"`);
          });
        } else {
          console.log('‚ùå Aba Fornecedores n√£o encontrada!');
        }
        
        // 2. Verificar aba Pedidos
        console.log('\nüìã === ABA PEDIDOS ===');
        const abaPedidos = planilha.getSheetByName('Pedidos');
        if (abaPedidos) {
          const headersPedidos = abaPedidos.getRange(1, 1, 1, abaPedidos.getLastColumn()).getValues()[0];
          console.log('üìä Colunas encontradas na aba Pedidos:', headersPedidos.length);
          headersPedidos.forEach((header, index) => {
            console.log(`   Coluna ${index + 1}: "${header}"`);
          });
          
          // Verificar se existe coluna "Estado Fornecedor"
          const indiceEstadoFornecedor = headersPedidos.indexOf('Estado Fornecedor');
          if (indiceEstadoFornecedor !== -1) {
            console.log(`‚úÖ Coluna "Estado Fornecedor" encontrada na posi√ß√£o ${indiceEstadoFornecedor + 1}`);
          } else {
            console.log('‚ö†Ô∏è Coluna "Estado Fornecedor" N√ÉO encontrada na aba Pedidos');
            console.log('   Voc√™ precisa adicionar esta coluna manualmente na planilha');
          }
        } else {
          console.log('‚ùå Aba Pedidos n√£o encontrada!');
        }
        
        // 3. Testar busca de fornecedor
        console.log('\nüîç === TESTE DE BUSCA DE FORNECEDOR ===');
        if (abaFornecedores) {
          const dadosTesteFornecedor = abaFornecedores.getRange(2, 1, 1, abaFornecedores.getLastColumn()).getValues()[0];
          if (dadosTesteFornecedor && dadosTesteFornecedor[1]) {
            const nomeFornecedor = String(dadosTesteFornecedor[1]);
            console.log(`üîç Testando busca do fornecedor: "${nomeFornecedor}"`);
            
            const fornecedoresData = abaFornecedores.getRange(2, 1, abaFornecedores.getLastRow() - 1, abaFornecedores.getLastColumn()).getValues();
            const foundFornecedor = fornecedoresData.find(row => String(row[1]) === nomeFornecedor);
            
            if (foundFornecedor) {
              console.log('‚úÖ Fornecedor encontrado!');
              console.log(`   - CNPJ: "${foundFornecedor[3]}"`);
              console.log(`   - Endere√ßo: "${foundFornecedor[4]}"`);
              console.log(`   - Condi√ß√£o Pagamento: "${foundFornecedor[5]}"`);
              console.log(`   - Forma Pagamento: "${foundFornecedor[6]}"`);
              console.log(`   - Estado: "${foundFornecedor[10]}" <- IMPORTANTE!`);
            } else {
              console.log('‚ùå Fornecedor n√£o encontrado na busca');
            }
          }
        }
        
        console.log('\n‚úÖ === DIAGN√ìSTICO CONCLU√çDO ===');
        return {
          status: 'success',
          message: 'Diagn√≥stico executado com sucesso! Verifique o console para detalhes.'
        };
        
      } catch (error) {
        console.error('‚ùå Erro no diagn√≥stico:', error);
        return {
          status: 'error',
          message: 'Erro no diagn√≥stico: ' + error.message
        };
      }
    }

    /**
     * FUN√á√ÉO ESPEC√çFICA PARA TESTAR A CAPTURA DO ESTADO DO FORNECEDOR
     * Execute esta fun√ß√£o com o nome de um fornecedor espec√≠fico
     */
    function testarEstadoFornecedor(nomeFornecedor) {
      console.log(`üîç === TESTE ESPEC√çFICO DO ESTADO DO FORNECEDOR ===`);
      console.log(`üìã Fornecedor: "${nomeFornecedor}"`);
      
      try {
        const planilha = SpreadsheetApp.openById(PLANILHA_ID);
        const fornecedoresSheet = planilha.getSheetByName('Fornecedores');
        
        if (!fornecedoresSheet) {
          console.log('‚ùå Aba Fornecedores n√£o encontrada!');
          return { status: 'error', message: 'Aba Fornecedores n√£o encontrada' };
        }
        
        const fornecedoresData = fornecedoresSheet.getRange(2, 1, fornecedoresSheet.getLastRow() - 1, fornecedoresSheet.getLastColumn()).getValues();
        const foundFornecedor = fornecedoresData.find(row => String(row[1]) === nomeFornecedor);
        
        if (foundFornecedor) {
          console.log('‚úÖ Fornecedor encontrado!');
          console.log('üìä Dados capturados:');
          console.log(`   - C√≥digo: "${foundFornecedor[0]}"`);
          console.log(`   - Raz√£o Social: "${foundFornecedor[1]}"`);
          console.log(`   - Nome Fantasia: "${foundFornecedor[2]}"`);
          console.log(`   - CNPJ: "${foundFornecedor[3]}"`);
          console.log(`   - Endere√ßo: "${foundFornecedor[4]}"`);
          console.log(`   - Condi√ß√£o Pagamento: "${foundFornecedor[5]}"`);
          console.log(`   - Forma Pagamento: "${foundFornecedor[6]}"`);
          console.log(`   - Grupo: "${foundFornecedor[7]}"`);
          console.log(`   - Estado: "${foundFornecedor[10]}" <- ESTE √â O ESTADO!`);
          
          // Simular o que seria salvo no pedido
          const estadoFornecedor = String(foundFornecedor[10] || '');
          console.log(`\nüíæ Estado que seria salvo no pedido: "${estadoFornecedor}"`);
          
          if (estadoFornecedor.trim()) {
            console.log('‚úÖ Estado preenchido e ser√° salvo corretamente!');
          } else {
            console.log('‚ö†Ô∏è Estado vazio - verifique se o fornecedor tem estado preenchido na planilha');
          }
          
          return {
            status: 'success',
            estadoEncontrado: estadoFornecedor,
            dadosCompletos: {
              cnpj: String(foundFornecedor[3] || ''),
              endereco: String(foundFornecedor[4] || ''),
              condicao: String(foundFornecedor[5] || ''),
              forma: String(foundFornecedor[6] || ''),
              estado: estadoFornecedor
            }
          };
        } else {
          console.log('‚ùå Fornecedor n√£o encontrado!');
          console.log('üìã Fornecedores dispon√≠veis:');
          fornecedoresData.slice(0, 5).forEach((row, index) => {
            console.log(`   ${index + 1}. "${row[1]}"`);
          });
          
          return {
            status: 'error',
            message: 'Fornecedor n√£o encontrado'
          };
        }
        
      } catch (error) {
        console.error('‚ùå Erro ao testar estado do fornecedor:', error);
        return {
          status: 'error',
          message: 'Erro: ' + error.message
        };
      }
    }

    /**
     * ===============================================
     * FUN√á√ïES AUXILIARES
     * ===============================================
     */

    /**
     * Formata uma data para o padr√£o ISO com data e hora
     * @param {string|Date} data - Data a ser formatada
     * @returns {string} - Data no formato ISO (YYYY-MM-DD HH:mm:ss)
     */
    function formatarDataParaISO(data) {
      try {
        let dataObj;
        
        if (!data) {
          dataObj = new Date();
        } else if (typeof data === 'string') {
          // Se for apenas data (YYYY-MM-DD), adicionar hora atual para evitar problemas de fuso hor√°rio
          if (data.match(/^\d{4}-\d{2}-\d{2}$/)) {
            // Para data simples, usar a hora atual em vez de meio-dia
            const agora = new Date();
            const horaAtual = agora.getHours().toString().padStart(2, '0');
            const minutoAtual = agora.getMinutes().toString().padStart(2, '0');
            const segundoAtual = agora.getSeconds().toString().padStart(2, '0');
            
            dataObj = new Date(data + `T${horaAtual}:${minutoAtual}:${segundoAtual}`);
            console.log('üìÖ Data simples convertida com hora atual:', data, '‚Üí', dataObj.toISOString());
          } else {
            // Para data com hora, usar como est√°
            dataObj = new Date(data);
          }
          
          // Se a convers√£o resultou em data inv√°lida, usar data atual
          if (isNaN(dataObj.getTime())) {
            console.warn('Data inv√°lida recebida:', data, 'Usando data atual');
            dataObj = new Date();
          }
        } else if (data instanceof Date) {
          dataObj = data;
        } else {
          console.warn('Tipo de data n√£o reconhecido:', typeof data, data, 'Usando data atual');
          dataObj = new Date();
        }
        
        // Formatar para YYYY-MM-DD HH:mm:ss usando fuso hor√°rio do Brasil
        return Utilities.formatDate(dataObj, 'America/Sao_Paulo', 'yyyy-MM-dd HH:mm:ss');
        
      } catch (error) {
        console.error('Erro ao formatar data:', error, 'Data recebida:', data);
        // Em caso de erro, usar data atual
        return Utilities.formatDate(new Date(), 'America/Sao_Paulo', 'yyyy-MM-dd HH:mm:ss');
      }
    }

    /**
     * Salva dados na planilha usando a mesma estrutura da fun√ß√£o salvarPedido
     * @param {Sheet} aba - Aba da planilha
     * @param {Object} dados - Dados para salvar
     * @param {number} linha - Linha para atualizar (opcional, para novos registros)
     */
    function salvarDadosNaPlanilha(aba, dados, linha = null) {
      const headers = aba.getRange(1, 1, 1, aba.getLastColumn()).getValues()[0];
      const rowData = new Array(headers.length).fill('');

      // Preencher dados conforme os cabe√ßalhos da planilha
      headers.forEach((header, index) => {
        if (dados.hasOwnProperty(header)) {
          rowData[index] = dados[header];
        }
      });

      if (linha) {
        // Atualizar linha existente
        aba.getRange(linha, 1, 1, rowData.length).setValues([rowData]);
      } else {
        // Adicionar nova linha
        aba.getRange(aba.getLastRow() + 1, 1, 1, rowData.length).setValues([rowData]);
      }
    }

    /**
     * Encontra a linha de um rascunho na planilha
     * @param {Sheet} aba - Aba da planilha
     * @param {string} rascunhoId - ID do rascunho
     * @returns {number} - N√∫mero da linha (0 se n√£o encontrado)
     */
    function encontrarLinhaRascunho(aba, rascunhoId) {
      const dados = aba.getDataRange().getValues();
      const cabecalhos = dados[0];
      const indiceNumeroPedido = cabecalhos.indexOf('N√∫mero do Pedido');
      const indiceStatus = cabecalhos.indexOf('Status');
      
      for (let i = 1; i < dados.length; i++) {
        const numeroRascunho = dados[i][indiceNumeroPedido] ? dados[i][indiceNumeroPedido].replace("'", "") : '';
        if (numeroRascunho === rascunhoId && dados[i][indiceStatus] === 'RASCUNHO') {
          return i + 1; // +1 porque getRange √© 1-indexed
        }
      }
      
      return 0;
    }

    /**
     * Valida dados para convers√£o de rascunho em pedido
     * @param {Object} dados - Dados do rascunho
     * @returns {Object} - Resultado da valida√ß√£o
     */
    function validarDadosParaPedido(dados) {
      if (!dados.fornecedor || !dados.fornecedor.trim()) {
        return {
          valido: false,
          mensagem: 'Fornecedor √© obrigat√≥rio.'
        };
      }
      
      if (!dados.itens || dados.itens.length === 0) {
        return {
          valido: false,
          mensagem: 'Pelo menos um item √© obrigat√≥rio.'
        };
      }
      
      // Validar se todos os itens t√™m descri√ß√£o
      const itensValidos = dados.itens.every(item => item.descricao && item.descricao.trim());
      if (!itensValidos) {
        return {
          valido: false,
          mensagem: 'Todos os itens devem ter uma descri√ß√£o.'
        };
      }
      
      return {
        valido: true,
        mensagem: 'Dados v√°lidos para finaliza√ß√£o.'
      };
    }

    /**
     * Gera um n√∫mero √∫nico para o pedido
     * @returns {string} - N√∫mero do pedido
     */
    function gerarNumeroPedido() {
      const agora = new Date();
      const ano = agora.getFullYear();
      const mes = String(agora.getMonth() + 1).padStart(2, '0');
      const dia = String(agora.getDate()).padStart(2, '0');
      const timestamp = agora.getTime();
      
      return `PED-${ano}${mes}${dia}-${timestamp}`;
    }

    // ===============================================
    // CONSTANTES E CONFIGURA√á√ïES
    // ===============================================
